-- MySQL Script generated by MySQL Workbench
-- Mon May 14 19:30:10 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;



CREATE DATABASE IF NOT EXISTS `emotibot` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
USE `emotibot` ;

-- --------------------------------------------------------

--
-- 資料表結構 `api_enterprise`
--

CREATE TABLE `api_enterprise` (
  `id` varchar(50) NOT NULL,
  `enterprise_name` varchar(100) DEFAULT NULL COMMENT '企业名称',
  `account_type` char(1) DEFAULT NULL COMMENT '企业账号类型，0-线索，1-试用，2-付费',
  `customer_manager` varchar(50) DEFAULT NULL COMMENT '客户负责人 职位-负责人姓名',
  `email` varchar(100) DEFAULT NULL COMMENT '邮箱',
  `phone` varchar(20) DEFAULT NULL COMMENT '电话',
  `project_leader` varchar(20) DEFAULT NULL COMMENT '项目负责人（内部的）',
  `account_status` char(1) DEFAULT NULL COMMENT '账号状态，0-启用，1-停用',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `create_user` varchar(50) DEFAULT NULL COMMENT '创建人',
  `modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `modify_user` varchar(50) DEFAULT NULL COMMENT '修改人',
  `is_remove` char(1) NOT NULL DEFAULT '0' COMMENT '逻辑删除位 1为删除，0为正常',
  `business_card` longblob COMMENT '名片',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  `enterprise_type` int(11) NOT NULL DEFAULT '1' COMMENT '企业类型 1：to B ; 2: to C'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='管理后台-企业账号表';

-- --------------------------------------------------------

--
-- 資料表結構 `api_preduct`
--

CREATE TABLE `api_preduct` (
  `PreductId` int(11) NOT NULL,
  `PreductName` varchar(200) DEFAULT NULL,
  `PreductRemark` varchar(1000) DEFAULT NULL,
  `CreatedUser` int(11) NOT NULL,
  `CreatedTime` datetime NOT NULL,
  `PreductVersion` int(11) NOT NULL,
  `Status` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `api_user`
--

CREATE TABLE `api_user` (
  `UserId` varchar(50) CHARACTER SET utf8 NOT NULL COMMENT '用户id',
  `Phone` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '用户手机号',
  `Email` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '用户邮箱',
  `CreatedTime` datetime NOT NULL COMMENT '账号创建时间',
  `Password` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '密码',
  `NickName` varchar(255) CHARACTER SET utf8 NOT NULL COMMENT '昵称',
  `Gender` int(11) DEFAULT NULL,
  `Type` int(11) NOT NULL COMMENT '类型',
  `Status` int(11) NOT NULL COMMENT '状态',
  `UpdatedTime` datetime NOT NULL COMMENT '更新时间',
  `Owner` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '持有人',
  `Remark` varchar(1000) CHARACTER SET utf8 DEFAULT NULL COMMENT '标识',
  `AiNickName` varchar(100) CHARACTER SET utf8 DEFAULT NULL,
  `Msg` varchar(200) CHARACTER SET utf8 DEFAULT '你好，我是你的机器人XX，我可以陪你聊天，为你答疑解惑哦！',
  `enterprise_id` varchar(50) DEFAULT NULL COMMENT '企业帐号',
  `RoleId` int(11) NOT NULL DEFAULT '0' COMMENT '0: 管理员\n1: 高级用户\n2: 普通用户',
  `AccountStatus` int(11) NOT NULL DEFAULT '1' COMMENT '0:  未激活\n1:  启用\n2: 停用'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户账号表';

-- --------------------------------------------------------

--
-- 資料表結構 `api_userkey`
--

CREATE TABLE `api_userkey` (
  `UserId` varchar(50) NOT NULL COMMENT '用户id',
  `Count` int(11) NOT NULL,
  `Version` int(11) NOT NULL,
  `CreatedTime` datetime NOT NULL COMMENT '创建时间',
  `PreductName` varchar(255) NOT NULL,
  `ApiKey` varchar(50) NOT NULL COMMENT '机器人id',
  `Status` int(11) NOT NULL COMMENT '机器人状态',
  `MaxCount` int(11) DEFAULT '500',
  `AutoUserID` int(11) DEFAULT '0',
  `NickName` varchar(255) DEFAULT NULL COMMENT '机器人昵称',
  `CommonFunctionIds` varchar(200) DEFAULT NULL,
  `AreaIds` varchar(200) DEFAULT NULL,
  `Type` int(11) DEFAULT '1' COMMENT '类型',
  `MsgType` int(11) DEFAULT '1',
  `Msg` varchar(5000) DEFAULT '你好，我是你的机器人XX，我可以陪你聊天，为你答疑解惑哦！',
  `MsgJson` text,
  `template_api_key` varchar(50) DEFAULT '54f59223a3591795e91f9d786cd36184',
  `industry_id` int(11) DEFAULT '1',
  `order_no` int(11) DEFAULT '0',
  `description` varchar(300) DEFAULT NULL COMMENT '描述'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='机器人表';

-- --------------------------------------------------------

--
-- 資料表結構 `audit_record`
--

CREATE TABLE `audit_record` (
  `id` bigint(11) UNSIGNED NOT NULL COMMENT 'audit id',
  `appid` varchar(36) NOT NULL COMMENT '机器人id',
  `user_id` varchar(64) NOT NULL DEFAULT '' COMMENT '进行修改的登录用户id',
  `ip_source` varchar(32) NOT NULL DEFAULT '' COMMENT '使用者IP',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改记录创建时间',
  `module` varchar(32) NOT NULL DEFAULT '' COMMENT '操作模组',
  `operation` varchar(32) NOT NULL DEFAULT '' COMMENT '操作类型',
  `content` mediumtext COMMENT '操作变更纪录',
  `result` tinyint(1) NOT NULL DEFAULT '0' COMMENT '操作结果'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='记录管理界面上所有新增、编辑、删除、汇入、汇出动作';

-- --------------------------------------------------------

--
-- 資料表結構 `bf_controller_config`
--

CREATE TABLE `bf_controller_config` (
  `id` varchar(50) NOT NULL,
  `code` varchar(50) NOT NULL COMMENT '配置的key',
  `value` varchar(50) NOT NULL COMMENT '配置的value',
  `category` varchar(20) NOT NULL COMMENT '配置的类别',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `create_user` varchar(50) DEFAULT NULL COMMENT '创建人',
  `modify_time` datetime DEFAULT NULL COMMENT '修改时间',
  `modify_user` varchar(50) DEFAULT NULL COMMENT '修改人',
  `is_remove` char(1) NOT NULL COMMENT '逻辑删除位 1为删除，0为正常'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='bf2.0 controller 配置表';

-- --------------------------------------------------------

--
-- 資料表結構 `bf_controller_reply`
--

CREATE TABLE `bf_controller_reply` (
  `id` varchar(50) NOT NULL,
  `text` varchar(200) NOT NULL COMMENT '返回的文本',
  `code` varchar(20) NOT NULL COMMENT '返回的key',
  `category` varchar(20) NOT NULL COMMENT '返回的文本的业务类别',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `create_user` varchar(50) DEFAULT NULL COMMENT '创建人',
  `modify_time` datetime DEFAULT NULL COMMENT '修改时间',
  `modify_user` varchar(50) DEFAULT NULL COMMENT '修改人',
  `is_remove` char(1) NOT NULL COMMENT '逻辑删除位 1为删除，0为正常'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='bf2.0 controller 回复表';

-- --------------------------------------------------------

--
-- 資料表結構 `cmd`
--

CREATE TABLE `cmd` (
  `cmd_id` int(11) NOT NULL,
  `appid` varchar(36) NOT NULL COMMENT '机器人id',
  `cid` int(11) DEFAULT NULL COMMENT '指令类别id',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT '指令名字',
  `target` int(4) DEFAULT NULL COMMENT '0:问题1:答案',
  `rule` text COMMENT 'json [{"type":"keyword", "value": ["kw1","kw2"]}, {"type":"regex", "value": ["[1-5]"]}',
  `answer` text COMMENT 'json, 同问答库answer格式',
  `response_type` int(4) DEFAULT NULL COMMENT '0:取代, 1: 附加至前, 2:附加至后',
  `status` int(4) DEFAULT '0' COMMENT '0: 关闭1: 开启',
  `begin_time` datetime DEFAULT NULL COMMENT '生效时间',
  `end_time` datetime DEFAULT NULL COMMENT '结束时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='指令设定';

-- --------------------------------------------------------

--
-- 資料表結構 `cmd_class`
--

CREATE TABLE `cmd_class` (
  `id` int(11) NOT NULL,
  `appid` char(36) NOT NULL DEFAULT '' COMMENT '机器人id',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT '指令类别名称',
  `parent` int(11) DEFAULT NULL COMMENT '父类别id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='指令类别';

-- --------------------------------------------------------

--
-- 資料表結構 `cmd_robot_tag`
--

CREATE TABLE `cmd_robot_tag` (
  `cmd_id` int(11) NOT NULL COMMENT '指令id',
  `robot_tag_id` int(11) NOT NULL COMMENT '维度标签id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='指令与维度标签关连';

-- --------------------------------------------------------

--
-- 資料表結構 `enterprise_type`
--

CREATE TABLE `enterprise_type` (
  `id` int(11) NOT NULL COMMENT '企业类型id',
  `name` varchar(45) NOT NULL COMMENT '企业类型name',
  `description` varchar(45) DEFAULT NULL COMMENT '描述'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='企业类型表';

-- --------------------------------------------------------

--
-- 資料表結構 `entities`
--

CREATE TABLE `entities` (
  `id` int(20) NOT NULL,
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id',
  `name` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '类别名称',
  `editable` tinyint(1) DEFAULT NULL COMMENT '是否可编辑',
  `cid` int(20) DEFAULT NULL COMMENT '类别id',
  `similar_words` longtext COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '同义词',
  `answer` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '敏感词回复',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='词库';

-- --------------------------------------------------------

--
-- 資料表結構 `entity_class`
--

CREATE TABLE `entity_class` (
  `id` int(20) NOT NULL,
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id',
  `name` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '类别名称',
  `pid` int(20) DEFAULT NULL COMMENT '父类别名称',
  `editable` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否可编辑',
  `intent_engine` tinyint(1) NOT NULL DEFAULT '1',
  `rule_engine` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='词库类别';

-- --------------------------------------------------------

--
-- 資料表結構 `entity_files`
--

CREATE TABLE `entity_files` (
  `id` int(18) NOT NULL COMMENT 'id',
  `appid` char(32) COLLATE utf8_unicode_ci NOT NULL COMMENT '机器人id',
  `filename` varchar(64) COLLATE utf8_unicode_ci NOT NULL DEFAULT '' COMMENT '词库上传档案名称',
  `content` longblob NOT NULL COMMENT '词库上传档案',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='词库档案上传';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_account_status`
--

CREATE TABLE `ent_account_status` (
  `ID` int(11) NOT NULL COMMENT '账号状态id',
  `Name` varchar(50) NOT NULL COMMENT '状态name'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='账号状态表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_ai_algorithm`
--

CREATE TABLE `ent_ai_algorithm` (
  `id` int(11) NOT NULL COMMENT 'id',
  `name` varchar(45) NOT NULL COMMENT '算法名称',
  `kind` int(11) NOT NULL COMMENT '算法类型',
  `enabled` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可用',
  `description` varchar(45) NOT NULL COMMENT '算法描述',
  `provider` varchar(45) NOT NULL COMMENT '算法提供者',
  `default_config` mediumtext NOT NULL COMMENT '预设设定值',
  `predict_url` varchar(200) NOT NULL COMMENT '预测用网路位址',
  `train_url` varchar(200) NOT NULL COMMENT '训练用网路位址',
  `test_url` varchar(200) NOT NULL COMMENT '测试用网路位址',
  `remove_url` varchar(200) NOT NULL DEFAULT 'n/a' COMMENT '移除用网路位址',
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='AI 算法库。可以包含 sentence embeding 学习算法， ml classify 算法， intent 训练算法等。';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_ai_algorithm_kind`
--

CREATE TABLE `ent_ai_algorithm_kind` (
  `id` int(11) NOT NULL COMMENT 'id',
  `name` varchar(45) NOT NULL COMMENT '算法类别名称',
  `description` varchar(200) NOT NULL COMMENT '算法类别描述'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='算法类别表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_api`
--

CREATE TABLE `ent_api` (
  `ID` int(11) NOT NULL COMMENT 'api id',
  `URL` varchar(50) NOT NULL COMMENT 'api url',
  `ENABLED` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否启用',
  `RIGHT_ID` int(11) DEFAULT NULL COMMENT '权限id',
  `MESSAGE` varchar(50) DEFAULT NULL COMMENT '描述',
  `SHOW_IN_OP_LOG` bit(1) DEFAULT b'1' COMMENT '是否在log中显示',
  `operation` varchar(10) DEFAULT NULL COMMENT '对应操作'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='API权限表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_chat_log_active_date_hour`
--

CREATE TABLE `ent_chat_log_active_date_hour` (
  `DATE` datetime NOT NULL,
  `HOUR` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_chat_optimization_report_log`
--

CREATE TABLE `ent_chat_optimization_report_log` (
  `date_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `done` bit(1) NOT NULL DEFAULT b'0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_check_number`
--

CREATE TABLE `ent_check_number` (
  `id` varchar(50) NOT NULL,
  `phone` varchar(11) DEFAULT NULL,
  `check_number` varchar(6) DEFAULT NULL,
  `create_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_check_token`
--

CREATE TABLE `ent_check_token` (
  `id` varchar(50) NOT NULL,
  `enterprise_id` varchar(50) DEFAULT NULL,
  `token` varchar(200) DEFAULT NULL,
  `create_date` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_config`
--

CREATE TABLE `ent_config` (
  `name` varchar(50) NOT NULL COMMENT '配置名称',
  `module` varchar(45) NOT NULL DEFAULT 'default' COMMENT '配置模块',
  `value` varchar(8000) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '配置值',
  `enabled` bit(1) DEFAULT b'1' COMMENT '是否启用',
  `description` varchar(500) DEFAULT NULL COMMENT '描述',
  `zhtw` varchar(4000) DEFAULT NULL COMMENT '台湾繁体中文',
  `enus` varchar(4000) DEFAULT NULL COMMENT '英文美国'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='配置表';

--
-- 觸發器 `ent_config`
--
DELIMITER $$
CREATE TRIGGER `ent_config_AFTER_DELETE` AFTER DELETE ON `ent_config` FOR EACH ROW BEGIN
if old.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_AFTER_INSERT` AFTER INSERT ON `ent_config` FOR EACH ROW BEGIN

if new.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_AFTER_UPDATE` AFTER UPDATE ON `ent_config` FOR EACH ROW BEGIN
if new.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_config_appid_customization`
--

CREATE TABLE `ent_config_appid_customization` (
  `name` varchar(50) NOT NULL COMMENT '配置名称',
  `app_id` varchar(50) NOT NULL COMMENT '机器人id',
  `value` varchar(8000) NOT NULL COMMENT '配置值'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='机器人定制化配置表';

--
-- 觸發器 `ent_config_appid_customization`
--
DELIMITER $$
CREATE TRIGGER `ent_config_appid_customization_AFTER_DELETE` AFTER DELETE ON `ent_config_appid_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, old.app_id);

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_appid_customization_AFTER_INSERT` AFTER INSERT ON `ent_config_appid_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, new.app_id);

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_appid_customization_AFTER_UPDATE` AFTER UPDATE ON `ent_config_appid_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, new.app_id);

END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_config_industry_customization`
--

CREATE TABLE `ent_config_industry_customization` (
  `name` varchar(50) NOT NULL,
  `industry_id` varchar(50) NOT NULL,
  `value` varchar(4000) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_config_user_customization`
--

CREATE TABLE `ent_config_user_customization` (
  `name` varchar(50) NOT NULL COMMENT '配置key',
  `user_id` varchar(50) NOT NULL COMMENT '用户id',
  `value` varchar(4000) NOT NULL COMMENT '配置值'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户定制化配置';

--
-- 觸發器 `ent_config_user_customization`
--
DELIMITER $$
CREATE TRIGGER `ent_config_user_customization_AFTER_DELETE` AFTER DELETE ON `ent_config_user_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(old.user_id, null);

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_user_customization_AFTER_INSERT` AFTER INSERT ON `ent_config_user_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(new.user_id, null);

END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `ent_config_user_customization_AFTER_UPDATE` AFTER UPDATE ON `ent_config_user_customization` FOR EACH ROW BEGIN
	CALL `emotibot`.`sp_update_config_version`(new.user_id, null);

END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_config_version`
--

CREATE TABLE `ent_config_version` (
  `user_id` varchar(50) NOT NULL DEFAULT 'system' COMMENT '用户id',
  `app_id` varchar(50) NOT NULL DEFAULT 'system' COMMENT '机器人id',
  `version_value` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '版本信息'
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='用户机器人版本信息';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_functions`
--

CREATE TABLE `ent_functions` (
  `name` varchar(50) NOT NULL COMMENT '技能名称',
  `description` varchar(50) NOT NULL COMMENT '描述',
  `sample` varchar(1000) DEFAULT NULL COMMENT '举例',
  `CreatedTime` datetime DEFAULT NULL COMMENT '创建时间',
  `Rank` int(11) DEFAULT '0' COMMENT '等级',
  `Intent` varchar(500) CHARACTER SET utf8 DEFAULT NULL COMMENT '意图',
  `Url` varchar(500) CHARACTER SET utf8 DEFAULT NULL,
  `FunctionOnOff` int(11) DEFAULT '1' COMMENT '开关'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='技能表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_functions_group`
--

CREATE TABLE `ent_functions_group` (
  `id` int(11) NOT NULL COMMENT '分组id',
  `name` varchar(50) DEFAULT NULL COMMENT '分组name',
  `description` varchar(45) DEFAULT NULL COMMENT '描述',
  `enabled` bit(1) DEFAULT b'1' COMMENT '是否可用'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='技能分组';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_industry`
--

CREATE TABLE `ent_industry` (
  `id` int(11) NOT NULL COMMENT '行业id',
  `name` varchar(45) NOT NULL COMMENT '行业名称',
  `enabled` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否启用',
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `description` varchar(1000) DEFAULT NULL COMMENT '描述',
  `templateKey` varchar(50) DEFAULT NULL,
  `chat_domain` varchar(45) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='机器人行业表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_ml_test_case`
--

CREATE TABLE `ent_ml_test_case` (
  `id` int(64) UNSIGNED NOT NULL COMMENT '测试题id',
  `app_id` varchar(45) CHARACTER SET latin1 NOT NULL COMMENT '机器人id',
  `question` varchar(4000) NOT NULL COMMENT '测试题',
  `label_sq` int(64) NOT NULL,
  `create_by_batch_mode` bit(1) NOT NULL DEFAULT b'1',
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `space` varchar(45) NOT NULL DEFAULT '_default_space' COMMENT 'dal space'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='SSM测试题表';

--
-- 觸發器 `ent_ml_test_case`
--
DELIMITER $$
CREATE TRIGGER `ent_ml_test_case_BEFORE_DELETE` BEFORE DELETE ON `ent_ml_test_case` FOR EACH ROW BEGIN



END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_module`
--

CREATE TABLE `ent_module` (
  `ID` int(11) NOT NULL COMMENT '模块id',
  `Name` varchar(50) NOT NULL COMMENT '模块名称'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='模块表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_request_log`
--

CREATE TABLE `ent_request_log` (
  `ID` int(64) NOT NULL,
  `client_ip` varchar(45) CHARACTER SET utf8 NOT NULL,
  `method` varchar(10) NOT NULL,
  `header_info` text CHARACTER SET utf8,
  `path_info` text NOT NULL,
  `request_info` longtext NOT NULL,
  `request_raw_body` longtext NOT NULL,
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `version` varchar(200) CHARACTER SET utf8 DEFAULT 'N/A',
  `user_id` varchar(50) CHARACTER SET utf8 DEFAULT NULL,
  `app_id` varchar(50) CHARACTER SET utf8 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_request_log_archive`
--

CREATE TABLE `ent_request_log_archive` (
  `ID` int(64) NOT NULL,
  `client_ip` varchar(45) CHARACTER SET utf8 NOT NULL,
  `method` varchar(10) NOT NULL,
  `header_info` text CHARACTER SET utf8,
  `path_info` text NOT NULL,
  `request_info` longtext NOT NULL,
  `request_raw_body` longtext NOT NULL,
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `version` varchar(200) CHARACTER SET utf8 DEFAULT 'N/A',
  `user_id` varchar(50) DEFAULT NULL,
  `app_id` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_right`
--

CREATE TABLE `ent_right` (
  `ID` int(11) NOT NULL COMMENT '权限id',
  `NAME` varchar(45) DEFAULT NULL COMMENT '权限名称',
  `DESCRIPTION` varchar(4000) DEFAULT NULL COMMENT '描述',
  `ENABLED` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可用',
  `MESSAGE` varchar(4000) DEFAULT NULL,
  `MODULEID` int(11) DEFAULT NULL COMMENT '模块id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='权限表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_role`
--

CREATE TABLE `ent_role` (
  `ID` int(11) NOT NULL COMMENT 'id',
  `NAME` varchar(45) NOT NULL COMMENT '角色名称',
  `DESCRIPTION` varchar(4000) DEFAULT NULL COMMENT '角色描述',
  `ENABLED` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否可用',
  `EnterpriseType` int(11) NOT NULL DEFAULT '1' COMMENT '企业类型'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='角色表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_solution`
--

CREATE TABLE `ent_solution` (
  `id` int(11) NOT NULL COMMENT '解决方案id',
  `name` varchar(45) CHARACTER SET utf8 NOT NULL COMMENT '解决方案名称',
  `enabled` bit(1) NOT NULL DEFAULT b'1' COMMENT '是否启用',
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `executor` varchar(3000) DEFAULT NULL COMMENT '执行者',
  `description` varchar(1000) CHARACTER SET utf8 DEFAULT NULL COMMENT '描述',
  `show_in_solution_list` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否在解决方案中显示',
  `optional` bit(1) NOT NULL DEFAULT b'1' COMMENT '可选项',
  `order_no` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='解决方案表';

-- --------------------------------------------------------

--
-- 資料表結構 `ent_ssm_dependency`
--

CREATE TABLE `ent_ssm_dependency` (
  `name` varchar(60) NOT NULL,
  `type` int(11) NOT NULL,
  `source` varchar(60) NOT NULL,
  `method` varchar(45) NOT NULL,
  `parameters` varchar(4000) NOT NULL,
  `result` varchar(4000) NOT NULL,
  `clazz` varchar(45) NOT NULL DEFAULT 'SSMDependency',
  `form_data` bit(1) NOT NULL DEFAULT b'0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_ssm_dependency_type`
--

CREATE TABLE `ent_ssm_dependency_type` (
  `id` int(11) NOT NULL,
  `name` varchar(45) NOT NULL,
  `description` varchar(4000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `ent_validator`
--

CREATE TABLE `ent_validator` (
  `key` varchar(128) NOT NULL COMMENT '验证器id',
  `pattern` varchar(2048) NOT NULL COMMENT '验证器模式',
  `messageKey` varchar(50) NOT NULL COMMENT '关键信息'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='验证器表';

-- --------------------------------------------------------

--
-- 資料表結構 `frontend_visible`
--

CREATE TABLE `frontend_visible` (
  `id` int(11) NOT NULL COMMENT '自增id',
  `rightid` int(11) NOT NULL COMMENT '权限id',
  `pageid` int(11) NOT NULL COMMENT '页面id',
  `uikey` varchar(45) DEFAULT NULL COMMENT 'ui关键词'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='UI权限表';

-- --------------------------------------------------------

--
-- 資料表結構 `function_switch`
--

CREATE TABLE `function_switch` (
  `function_id` int(11) NOT NULL COMMENT '技能id',
  `appid` char(36) NOT NULL DEFAULT '' COMMENT '机器人id',
  `module_name` varchar(20) NOT NULL COMMENT '模组名称',
  `module_name_zh` varchar(20) NOT NULL COMMENT '模组中文名称',
  `third_url` text COMMENT '第三方url',
  `on_off` tinyint(1) NOT NULL DEFAULT '0' COMMENT '开关(0: 关, 1: 开)',
  `remark` varchar(50) DEFAULT NULL COMMENT '备注',
  `intent` varchar(20) NOT NULL COMMENT '触发意图',
  `share` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否共享',
  `type` varchar(20) NOT NULL COMMENT '类型',
  `status` int(11) DEFAULT '0' COMMENT '状态(0: 显示, -1: 隐藏)'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='机器人技能开关';

-- --------------------------------------------------------

--
-- 資料表結構 `locker`
--

CREATE TABLE `locker` (
  `lock_id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
  `get_by` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '得到锁的使用者',
  `updated_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `process_status`
--

CREATE TABLE `process_status` (
  `id` int(18) NOT NULL COMMENT 'id',
  `app_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '机器人id',
  `module` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '处理模块名称',
  `start_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '开始时间',
  `end_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '结束时间',
  `status` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '状态',
  `message` text COLLATE utf8mb4_unicode_ci COMMENT '处理结果讯息',
  `entity_file_name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '档案名称'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `question_answer_view`
--

CREATE TABLE `question_answer_view` (
  `q_id` int(11) DEFAULT NULL,
  `content` int(11) DEFAULT NULL,
  `content2` int(11) DEFAULT NULL,
  `content3` int(11) DEFAULT NULL,
  `content4` int(11) DEFAULT NULL,
  `content5` int(11) DEFAULT NULL,
  `content6` int(11) DEFAULT NULL,
  `content7` int(11) DEFAULT NULL,
  `content8` int(11) DEFAULT NULL,
  `content9` int(11) DEFAULT NULL,
  `content10` int(11) DEFAULT NULL,
  `a_id` int(11) DEFAULT NULL,
  `answer` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `robot_answer`
--

CREATE TABLE `robot_answer` (
  `a_id` int(4) NOT NULL COMMENT '形象答案id',
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id',
  `parent_q_id` int(4) NOT NULL COMMENT '形象问题id',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '答案内容',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='机器人形象答案';

-- --------------------------------------------------------

--
-- 資料表結構 `robot_question`
--

CREATE TABLE `robot_question` (
  `q_id` int(10) NOT NULL COMMENT '形象问题id',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '形象问题内容',
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `answer_count` smallint(5) DEFAULT '0' COMMENT '答案数量',
  `content2` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容2',
  `content3` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容3',
  `content4` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容4',
  `content5` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容5',
  `content6` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容6',
  `content7` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容7',
  `content8` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容8',
  `content9` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容9',
  `content10` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '相关问题内容10',
  `status` int(2) DEFAULT '0' COMMENT '状态(0: 正常, 1: 待更新)'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `robot_profile_answer`
--

CREATE TABLE IF NOT EXISTS `robot_profile_answer` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '答案id',
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '机器人id',
  `qid` int(10) NOT NULL COMMENT '关连问题id',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '答案内容',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态',
  PRIMARY KEY (`id`),
  KEY `content` (`content`),
  KEY `IDX_a_id` (`id`),
  KEY `answer_parent_q_id` (`qid`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `robot_profile_extend`
--

CREATE TABLE IF NOT EXISTS `robot_profile_extend` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '扩展问id',
  `appid` char(36) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '机器人id',
  `qid` int(10) NOT NULL COMMENT '关连问题id',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '问题内容',
  `createdtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态',
  PRIMARY KEY (`id`),
  KEY `content` (`content`),
  KEY `IDX_q_id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='机器人形象扩展问题';

-- --------------------------------------------------------

--
-- 資料表結構 `robot_profile_question`
--

CREATE TABLE IF NOT EXISTS `robot_profile_question` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '机器人形象问题',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '问题内容',
  `createdtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`),
  KEY `content` (`content`),
  KEY `IDX_q_id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='机器人形象问题';

-- --------------------------------------------------------

--
-- 資料表結構 `robot_words`
--

CREATE TABLE `robot_words` (
  `id` int(11) NOT NULL COMMENT '机器人话述id',
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id',
  `content` text COLLATE utf8mb4_unicode_ci COMMENT '话述内容',
  `type` int(4) DEFAULT '1' COMMENT '机器人话述类型id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `robot_words_type`
--

CREATE TABLE `robot_words_type` (
  `type` int(4) NOT NULL COMMENT '话述类型id',
  `name` varchar(200) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '话述名称',
  `comment` varchar(200) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '话述备注'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `state_machine`
--

CREATE TABLE `state_machine` (
  `state_id` bigint(20) UNSIGNED NOT NULL COMMENT 'id',
  `content` longblob COMMENT '档案内容',
  `action` varchar(32) COLLATE utf8_unicode_ci NOT NULL COMMENT '执行动作',
  `status` varchar(16) COLLATE utf8_unicode_ci NOT NULL COMMENT '状态',
  `user_id` varchar(64) COLLATE utf8_unicode_ci NOT NULL COMMENT '使用者id',
  `created_time` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_time` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `extra_info` text COLLATE utf8_unicode_ci COMMENT '系统讯息'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 資料表結構 `tags`
--

CREATE TABLE `tags` (
  `id` int(20) NOT NULL COMMENT 'id',
  `code` char(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '代码',
  `name` varchar(100) CHARACTER SET utf8mb4 DEFAULT NULL COMMENT '标签显示名称',
  `type` int(20) DEFAULT NULL COMMENT '标签类型',
  `created_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `app_id` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'system' COMMENT '机器人id (system: 共用)',
  `label_id` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'dim' COMMENT '标签id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='ssm维度标签表';

-- --------------------------------------------------------

--
-- 資料表結構 `tag_type`
--

CREATE TABLE `tag_type` (
  `id` int(4) NOT NULL COMMENT '维度id',
  `code` char(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '维度代码',
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '维度显示名称',
  `appid` char(36) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT '机器人id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='ssm维度表';

-- --------------------------------------------------------

--
-- 資料表結構 `taskengineapp`
--

CREATE TABLE `taskengineapp` (
  `pk` varchar(90) NOT NULL COMMENT '主键',
  `appID` varchar(50) NOT NULL COMMENT '机器人id',
  `scenarioID` varchar(50) NOT NULL COMMENT '场景id'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='多轮引擎机器人场景关连表';

-- --------------------------------------------------------

--
-- 資料表結構 `taskenginemappingtable`
--

CREATE TABLE `taskenginemappingtable` (
  `mapping_table_name` varchar(50) NOT NULL COMMENT '转换数据表名称',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `update_user` varchar(50) DEFAULT NULL COMMENT '更新使用者',
  `appID` varchar(50) DEFAULT NULL COMMENT '机器人id',
  `content` mediumtext NOT NULL COMMENT '转换数据表内容'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务引擎转换数据表';

-- --------------------------------------------------------

--
-- 資料表結構 `taskenginescenario`
--

CREATE TABLE `taskenginescenario` (
  `scenarioID` varchar(50) NOT NULL COMMENT '场景id',
  `userID` varchar(50) NOT NULL COMMENT '使用者id',
  `appID` varchar(50) DEFAULT NULL COMMENT '机器人id',
  `content` mediumtext COMMENT '场景内容',
  `layout` mediumtext COMMENT '场景节点位置',
  `public` int(11) NOT NULL DEFAULT '0' COMMENT '是否为公用的场景',
  `editing` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否为编辑中',
  `editingContent` mediumtext COMMENT '编辑中的场景内容',
  `editingLayout` mediumtext COMMENT '编辑中的场景节点位置',
  `updatetime` datetime NOT NULL DEFAULT '1970-01-01 00:00:00' COMMENT '更新时间',
  `onoff` int(11) DEFAULT '1' COMMENT '场景开关'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务引擎场景表';

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ai_solution`
--

CREATE TABLE `tbl_ai_solution` (
  `id` int(11) NOT NULL,
  `name` varchar(50) DEFAULT NULL,
  `enabled` bit(1) NOT NULL DEFAULT b'1',
  `description` varchar(200) NOT NULL,
  `ai_algorithm_id` int(11) NOT NULL,
  `config` mediumtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_appid_tree`
--

CREATE TABLE `tbl_appid_tree` (
  `app_id` varchar(50) CHARACTER SET latin1 NOT NULL,
  `comment` varchar(5000) DEFAULT NULL,
  `parent_app_id` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `group_name` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_bf_process_state`
--

CREATE TABLE `tbl_bf_process_state` (
  `original_state` int(11) NOT NULL,
  `availabl_eState` varchar(255) NOT NULL,
  PRIMARY KEY (`original_state`, `availabl_eState`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_history_60_days`
--

CREATE TABLE `tbl_chat_log_history_60_days` (
  `ID` int(11) NOT NULL,
  `USER_ID` varchar(50) NOT NULL,
  `APPID` varchar(50) NOT NULL,
  `QUESTION` varchar(5000) NOT NULL,
  `ANSWER` mediumtext,
  `MATCHED_SQ` varchar(200) DEFAULT NULL,
  `RAW_STRING` mediumtext NOT NULL,
  `SOURCE` varchar(200) NOT NULL DEFAULT 'Unkow',
  `EXEC_TIME` int(11) NOT NULL,
  `CREATE_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `score` decimal(8,2) DEFAULT NULL,
  `match_module` varchar(200) CHARACTER SET utf8 DEFAULT NULL COMMENT '	匹配模块内容字段\r•	给出回答的机器人模块中的下一层分类：\r•	如果是SSM，给出对应的标准问题\r•	如果是多轮对话引擎，给出对应的场景（task）名称\r•	如果是知识图谱，给出对应的实体\r•	如果是backfill或者闲聊，显示为空',
  `uniqueId` varchar(50) CHARACTER SET utf8 DEFAULT NULL COMMENT 'sessionId',
  `status` char(1) CHARACTER SET utf8 DEFAULT NULL COMMENT '0为未标注，1为已标注',
  `ignore_status` char(1) NOT NULL DEFAULT '0' COMMENT '是否忽略',
  `badcase_flag` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_history_archive`
--

CREATE TABLE `tbl_chat_log_history_archive` (
  `ID` int(11) NOT NULL,
  `USER_ID` varchar(50) NOT NULL,
  `APPID` varchar(50) NOT NULL,
  `QUESTION` varchar(5000) NOT NULL,
  `ANSWER` mediumtext,
  `MATCHED_SQ` varchar(200) DEFAULT NULL,
  `RAW_STRING` mediumtext NOT NULL,
  `SOURCE` varchar(200) NOT NULL DEFAULT 'Unkow',
  `EXEC_TIME` int(11) NOT NULL,
  `CREATE_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `score` decimal(8,2) DEFAULT NULL,
  `match_module` varchar(200) DEFAULT NULL COMMENT '	匹配模块内容字段\r•	给出回答的机器人模块中的下一层分类：\r•	如果是SSM，给出对应的标准问题\r•	如果是多轮对话引擎，给出对应的场景（task）名称\r•	如果是知识图谱，给出对应的实体\r•	如果是backfill或者闲聊，显示为空\r',
  `uniqueId` varchar(50) DEFAULT NULL COMMENT 'sessionId',
  `status` char(1) DEFAULT NULL COMMENT '0为未标注，1为已标注',
  `ignore_status` char(1) NOT NULL DEFAULT '0' COMMENT '是否忽略',
  `badcase_flag` int(11) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_manual_clustering_group_log_map`
--

CREATE TABLE `tbl_chat_log_manual_clustering_group_log_map` (
  `id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  `log_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_manual_clustering_report`
--

CREATE TABLE `tbl_chat_log_manual_clustering_report` (
  `id` int(11) NOT NULL DEFAULT '0',
  `appid` varchar(50) NOT NULL,
  `startTime` datetime NOT NULL,
  `endTime` datetime NOT NULL,
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_manual_clustering_request_log`
--

CREATE TABLE `tbl_chat_log_manual_clustering_request_log` (
  `appid` varchar(50) NOT NULL,
  `request_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `pendIndex` varchar(50) NOT NULL,
  `status` enum('pending','running','done','failed') DEFAULT NULL,
  `done_datetime` datetime DEFAULT NULL,
  `conditions` varchar(8000) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_manual_clustering_tag_group`
--

CREATE TABLE `tbl_chat_log_manual_clustering_tag_group` (
  `id` int(11) NOT NULL,
  `report_id` varchar(500) NOT NULL,
  `tag` varchar(500) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_past_2_days`
--

CREATE TABLE `tbl_chat_log_past_2_days` (
  `ID` int(11) NOT NULL,
  `USER_ID` varchar(50) COLLATE utf8mb4_bin NOT NULL,
  `APPID` varchar(50) COLLATE utf8mb4_bin NOT NULL,
  `QUESTION` varchar(5000) COLLATE utf8mb4_bin NOT NULL,
  `ANSWER` mediumtext COLLATE utf8mb4_bin,
  `MATCHED_SQ` varchar(200) COLLATE utf8mb4_bin DEFAULT NULL,
  `RAW_STRING` mediumtext COLLATE utf8mb4_bin NOT NULL,
  `SOURCE` varchar(200) COLLATE utf8mb4_bin NOT NULL DEFAULT 'Unkow',
  `EXEC_TIME` int(11) NOT NULL,
  `CREATE_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `score` decimal(8,2) DEFAULT NULL,
  `match_module` varchar(200) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '	匹配模块内容字段\r•	给出回答的机器人模块中的下一层分类：\r•	如果是SSM，给出对应的标准问题\r•	如果是多轮对话引擎，给出对应的场景（task）名称\r•	如果是知识图谱，给出对应的实体\r•	如果是backfill或者闲聊，显示为空\r',
  `uniqueId` varchar(50) COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'sessionId',
  `status` char(1) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '0为未标注，1为已标注',
  `ignore_status` char(1) COLLATE utf8mb4_bin NOT NULL DEFAULT '0' COMMENT '是否忽略',
  `badcase_flag` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_statistic_chat_count_60_days`
--

CREATE TABLE `tbl_chat_log_statistic_chat_count_60_days` (
  `APPID` varchar(50) NOT NULL,
  `DATE` datetime NOT NULL,
  `HOUR` int(11) NOT NULL,
  `SQ_CHAT_COUNT` int(11) NOT NULL,
  `NON_SQ_CHAT_COUNT` int(11) NOT NULL,
  `EXEC_TIME` float NOT NULL,
  `CREATE_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_log_statistic_sq_count_60_days`
--

CREATE TABLE `tbl_chat_log_statistic_sq_count_60_days` (
  `APPID` varchar(50) NOT NULL,
  `DATE` datetime NOT NULL,
  `HOUR` int(11) NOT NULL,
  `MATCHED_SQ` varchar(200) NOT NULL,
  `COUNT` int(11) NOT NULL,
  `CREATE_DATETIME` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_optimization_report`
--

CREATE TABLE `tbl_chat_optimization_report` (
  `id` int(11) NOT NULL,
  `appid` varchar(50) NOT NULL,
  `date_from` datetime NOT NULL,
  `date_to` datetime NOT NULL,
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_optimization_report_request_log`
--

CREATE TABLE `tbl_chat_optimization_report_request_log` (
  `appid` varchar(50) NOT NULL,
  `request_datetime` datetime NOT NULL,
  `pendIndex` varchar(50) DEFAULT NULL,
  `status` varchar(8000) DEFAULT NULL,
  `done_datetime` varchar(45) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_optimization_report_tag_group`
--

CREATE TABLE `tbl_chat_optimization_report_tag_group` (
  `id` int(11) NOT NULL,
  `report_id` int(11) NOT NULL,
  `tag` varchar(45) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_chat_optimization_report_tag_group_content`
--

CREATE TABLE `tbl_chat_optimization_report_tag_group_content` (
  `id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  `content` varchar(8000) NOT NULL,
  `labeled` bit(1) NOT NULL DEFAULT b'0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_exec_sqlq_semblance_status`
--

CREATE TABLE `tbl_exec_sqlq_semblance_status` (
  `appid` varchar(50) NOT NULL,
  `status` enum('idle','running') NOT NULL DEFAULT 'idle',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_function_group`
--

CREATE TABLE `tbl_function_group` (
  `function_name` varchar(50) NOT NULL,
  `function_group_id` int(11) NOT NULL,
  `order_no` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_industry_function_group`
--

CREATE TABLE `tbl_industry_function_group` (
  `industry_id` int(11) NOT NULL,
  `function_group_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_lq_semblance_map`
--

CREATE TABLE `tbl_lq_semblance_map` (
  `lq1` varchar(250) NOT NULL,
  `lq2` varchar(250) NOT NULL,
  `score` float NOT NULL DEFAULT '0',
  `sq_map_id` varchar(200) NOT NULL,
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `appid` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_test_correct_rate_details_archive`
--

CREATE TABLE `tbl_ml_test_correct_rate_details_archive` (
  `app_id` varchar(45) NOT NULL,
  `label_sq` int(11) NOT NULL,
  `test_case_count` int(11) DEFAULT NULL,
  `ml_test_history_id` int(11) NOT NULL,
  `test_count` int(11) DEFAULT NULL,
  `correct_count` int(11) DEFAULT NULL,
  `correct_rate` float DEFAULT NULL,
  `correct_rate_text` varchar(50) DEFAULT NULL,
  `space` varchar(45) NOT NULL DEFAULT '_default_space',
  PRIMARY KEY (`label_sq`, `ml_test_history_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_test_history`
--

CREATE TABLE `tbl_ml_test_history` (
  `id` int(11) NOT NULL,
  `app_id` varchar(45) CHARACTER SET latin1 NOT NULL,
  `date_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `status` varchar(45) NOT NULL DEFAULT '0',
  `train_result_id` int(11) DEFAULT NULL,
  `test_count` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_test_history_archive`
--

CREATE TABLE `tbl_ml_test_history_archive` (
  `id` int(11) NOT NULL,
  `app_id` varchar(45) NOT NULL,
  `date_time` datetime NOT NULL,
  `correct_count` int(11) NOT NULL,
  `test_count` int(11) NOT NULL,
  `correct_rate` float NOT NULL,
  `correct_rate_text` varchar(50) NOT NULL,
  `status` varchar(45) NOT NULL,
  `train_result_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_test_result_archive`
--

CREATE TABLE `tbl_ml_test_result_archive` (
  `test_case_id` int(11) NOT NULL,
  `app_id` varchar(45) DEFAULT NULL,
  `ml_test_history_id` int(11) NOT NULL,
  `question` varchar(4000) DEFAULT NULL,
  `label_sq` int(32) DEFAULT NULL,
  `matched_sq` varchar(2000) DEFAULT NULL,
  `right` bit(1) DEFAULT NULL,
  `score` float DEFAULT NULL,
  `source` varchar(45) DEFAULT NULL,
  `space` varchar(45) NOT NULL DEFAULT '_default_space',
  PRIMARY KEY (`test_case_id`, `ml_test_history_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_test_result_no_case_text`
--

CREATE TABLE `tbl_ml_test_result_no_case_text` (
  `ml_test_history_id` int(11) NOT NULL,
  `ml_test_case_id` int(11) NOT NULL,
  `matched_sq` int(64) NOT NULL,
  `score` float DEFAULT NULL,
  `source` varchar(45) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_ml_train_history`
--

CREATE TABLE `tbl_ml_train_history` (
  `id` int(11) NOT NULL,
  `app_id` varchar(50) NOT NULL,
  `status` varchar(45) NOT NULL,
  `model_id` varchar(200) DEFAULT NULL,
  `result` longtext,
  `create_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `algo_kind_id` int(11) NOT NULL,
  `algo_id` int(11) NOT NULL,
  `algo_solution_id` int(11) DEFAULT NULL,
  `train_url` varchar(4000) NOT NULL,
  `config` longtext NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_exception`
--

CREATE TABLE `tbl_request_exception` (
  `request_id` int(64) NOT NULL,
  `error_code` int(11) NOT NULL,
  `error_message` text NOT NULL,
  `exception_type` varchar(500) NOT NULL,
  `exception_trace` text NOT NULL,
  PRIMARY KEY (`request_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_exception_archive`
--

CREATE TABLE `tbl_request_exception_archive` (
  `request_id` int(64) NOT NULL,
  `error_code` int(11) NOT NULL,
  `error_message` text NOT NULL,
  `exception_type` varchar(500) NOT NULL,
  `exception_trace` text NOT NULL,
  PRIMARY KEY (`request_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_log`
--

CREATE TABLE `tbl_request_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `request_id` int(11) DEFAULT NULL,
  `level` varchar(45) DEFAULT NULL,
  `message` longtext,
  `file_name` varchar(2000) DEFAULT NULL,
  `line` int(11) DEFAULT NULL,
  `time_cost` float DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_log_archive`
--

CREATE TABLE `tbl_request_log_archive` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `request_id` int(11) DEFAULT NULL,
  `level` varchar(45) DEFAULT NULL,
  `message` longtext,
  `file_name` varchar(2000) DEFAULT NULL,
  `line` int(11) DEFAULT NULL,
  `time_cost` float DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_response`
--

CREATE TABLE `tbl_request_response` (
  `request_id` int(64) NOT NULL,
  `response_body` longtext NOT NULL,
  `exec_time` float NOT NULL,
  PRIMARY KEY (`request_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_request_response_archive`
--

CREATE TABLE `tbl_request_response_archive` (
  `request_id` int(64) NOT NULL,
  `response_body` longtext NOT NULL,
  `exec_time` float NOT NULL,
  PRIMARY KEY (`request_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_robot_apply_state`
--

CREATE TABLE `tbl_robot_apply_state` (
  `appid` varchar(50) NOT NULL,
  `apply_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `state` enum('pending','accept','reject') NOT NULL DEFAULT 'pending'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_robot_solution`
--

CREATE TABLE `tbl_robot_solution` (
  `robot_api_key` varchar(50) NOT NULL,
  `solution_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_robot_ssm_stage`
--

CREATE TABLE `tbl_robot_ssm_stage` (
  `app_id` varchar(50) NOT NULL,
  `module` varchar(50) NOT NULL,
  `stage` int(11) NOT NULL,
  `stage_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_robot_tag`
--

CREATE TABLE `tbl_robot_tag` (
  `id` bigint(11) NOT NULL COMMENT 'tag的ID标识',
  `app_id` varchar(100) NOT NULL COMMENT 'tag所属的机器人id',
  `name` varchar(100) NOT NULL COMMENT 'tag的名字',
  `type` enum('system','userdefine') NOT NULL DEFAULT 'userdefine' COMMENT 'tag类型，系统默认或用户定义',
  `category` enum('sq','other') NOT NULL DEFAULT 'sq' COMMENT 'tag类别，用于区分tag的类别属性',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'tag创建时间',
  `description` varchar(500) NOT NULL DEFAULT 'no' COMMENT 'tag描述信息'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_role_right`
--

CREATE TABLE `tbl_role_right` (
  `ROLE_ID` int(11) NOT NULL,
  `RIGHT_ID` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_semblance_sqlq_calc_status`
--

CREATE TABLE `tbl_semblance_sqlq_calc_status` (
  `appid` varchar(50) NOT NULL,
  `request_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `pendIndex` int(11) NOT NULL,
  `status` enum('pending','running','done','failed') DEFAULT 'pending',
  `done_datetime` varchar(45) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_solution_stage_lastest_status`
--

CREATE TABLE `tbl_solution_stage_lastest_status` (
  `app_id` varchar(50) NOT NULL,
  `module` varchar(50) NOT NULL,
  `stage` int(11) NOT NULL,
  `status` varchar(256) NOT NULL,
  `status_datetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_sq_category`
--

CREATE TABLE `tbl_sq_category` (
  `id` int(11) NOT NULL,
  `pid` int(11) NOT NULL DEFAULT '0',
  `app_id` varchar(50) NOT NULL,
  `level` smallint(5) NOT NULL DEFAULT '0',
  `name` varchar(45) DEFAULT NULL,
  `label` varchar(30) DEFAULT NULL,
  `path` varchar(200) DEFAULT NULL,
  `is_del` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_sq_semblance_map`
--

CREATE TABLE `tbl_sq_semblance_map` (
  `sq1` varchar(250) NOT NULL,
  `sq2` varchar(250) NOT NULL,
  `score` float NOT NULL DEFAULT '0',
  `appid` varchar(50) NOT NULL,
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_upload_corpus_history`
--

CREATE TABLE `tbl_upload_corpus_history` (
  `id` int(11) NOT NULL,
  `user_id` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `app_id` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `is_part` bit(1) DEFAULT b'1',
  `type` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `comments` varchar(4096) DEFAULT NULL,
  `file_path` varchar(4096) DEFAULT NULL,
  `rows` int(11) DEFAULT NULL,
  `valid_rows` int(11) DEFAULT NULL,
  `date_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `done_rows` int(11) DEFAULT NULL,
  `space` varchar(45) DEFAULT '_default_space'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_upload_ml_test_history`
--

CREATE TABLE `tbl_upload_ml_test_history` (
  `id` int(11) NOT NULL,
  `user_id` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `app_id` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `comments` varchar(4096) DEFAULT NULL,
  `file_path` varchar(4096) DEFAULT NULL,
  `rows` int(11) DEFAULT NULL,
  `date_time` datetime DEFAULT CURRENT_TIMESTAMP,
  `is_part` bit(1) DEFAULT b'1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_upload_result_details`
--

CREATE TABLE `tbl_upload_result_details` (
  `upload_id` int(11) NOT NULL,
  `action` varchar(45) NOT NULL,
  `row_id` int(11) NOT NULL DEFAULT '0',
  `code` varchar(45) NOT NULL,
  `message` varchar(2000) DEFAULT NULL,
  `date_time` datetime DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_user_access_token`
--

CREATE TABLE `tbl_user_access_token` (
  `USER_ID` varchar(50) NOT NULL,
  `access_token` varchar(100) NOT NULL,
  `expiration` int(11) NOT NULL,
  `create_datetime` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_user_right_special`
--

CREATE TABLE `tbl_user_right_special` (
  `user_id` varchar(50) CHARACTER SET latin1 NOT NULL,
  `right_id` int(11) NOT NULL,
  `has` bit(1) DEFAULT b'1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `tbl_user_stare_robot`
--

CREATE TABLE `tbl_user_stare_robot` (
  `user_id` varchar(45) NOT NULL,
  `app_id` varchar(45) NOT NULL,
  `stare_date_time` datetime DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 資料表結構 `template`
--

CREATE TABLE `template` (
  `id` int(11) NOT NULL,
  `name` varchar(45) NOT NULL,
  `message` varchar(45) DEFAULT NULL,
  `appid` varchar(45) DEFAULT NULL,
  `sqcount` int(11) NOT NULL DEFAULT '0',
  `corpuscount` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 已匯出資料表的索引
--

--
-- Table structure for table `intent_versions`
--

DROP TABLE IF EXISTS `intent_versions`;

CREATE TABLE `intent_versions` (
  `intent_version_id` int(11) NOT NULL AUTO_INCREMENT,
  `app_id` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  `ie_model_id` varchar(128) COLLATE utf8_unicode_ci DEFAULT NULL,
  `re_model_id` varchar(128) COLLATE utf8_unicode_ci DEFAULT NULL,
  `orig_file_name` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `file_name` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
  `in_used` tinyint(1) NOT NULL DEFAULT '0',
  `created_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`intent_version_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Table structure for table `intents`
--

DROP TABLE IF EXISTS `intents`;

CREATE TABLE `intents` (
  `intent_id` int(11) NOT NULL AUTO_INCREMENT,
  `app_id` varchar(128) NOT NULL,
  `name` varchar(256) NOT NULL,
  `intent_version_id` int(11) NOT NULL,
  PRIMARY KEY (`intent_id`),
  KEY `intent_version_id` (`intent_version_id`),
  CONSTRAINT `intents_ibfk_1` FOREIGN KEY (`intent_version_id`) REFERENCES `intent_versions` (`intent_version_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

DROP TABLE IF EXISTS `intent_train_sets`;

--
-- Table structure for table `intent_train_sets`
--

CREATE TABLE `intent_train_sets` (
  `intent_train_set_id` int(11) NOT NULL AUTO_INCREMENT,
  `sentence` varchar(256) NOT NULL,
  `intent_id` int(11) NOT NULL,
  `intent_version_id` int(11) NOT NULL,
  PRIMARY KEY (`intent_train_set_id`),
  KEY `intent_id` (`intent_id`),
  KEY `intent_version_id` (`intent_version_id`),
  CONSTRAINT `intent_train_sets_ibfk_1` FOREIGN KEY (`intent_id`) REFERENCES `intents` (`intent_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `intent_train_sets_ibfk_2` FOREIGN KEY (`intent_version_id`) REFERENCES `intent_versions` (`intent_version_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6080 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 資料表索引 `api_enterprise`
--
ALTER TABLE `api_enterprise`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_phone` (`phone`(11)),
  ADD KEY `idx_email` (`email`(15)),
  ADD KEY `idx_entrprise_name` (`enterprise_name`(15));

--
-- 資料表索引 `api_preduct`
--
ALTER TABLE `api_preduct`
  ADD PRIMARY KEY (`PreductId`);

--
-- 資料表索引 `api_user`
--
ALTER TABLE `api_user`
  ADD PRIMARY KEY (`UserId`),
  ADD KEY `fk_enterprise_id_idx` (`enterprise_id`),
  ADD KEY `idx_roleid` (`RoleId`),
  ADD KEY `idx_exterpriseid` (`enterprise_id`(30)),
  ADD KEY `idx_accountstatus` (`AccountStatus`),
  ADD KEY `idx_phone` (`Phone`(11)),
  ADD KEY `idx_email` (`Email`(15));

--
-- 資料表索引 `api_userkey`
--
ALTER TABLE `api_userkey`
  ADD PRIMARY KEY (`UserId`,`PreductName`),
  ADD KEY `idx_template_api_key` (`template_api_key`),
  ADD KEY `idx_type` (`Type`),
  ADD KEY `idx_status` (`Status`),
  ADD KEY `idx_industryid` (`industry_id`),
  ADD KEY `idx_apikey` (`ApiKey`),
  ADD KEY `api_userkey_ApiKey_IDX` (`ApiKey`(10)) USING BTREE;

--
-- 資料表索引 `audit_record`
--
ALTER TABLE `audit_record`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_appid` (`appid`);

--
-- 資料表索引 `bf_controller_config`
--
ALTER TABLE `bf_controller_config`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `bf_controller_reply`
--
ALTER TABLE `bf_controller_reply`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `cmd`
--
ALTER TABLE `cmd`
  ADD PRIMARY KEY (`cmd_id`);

--
-- 資料表索引 `cmd_class`
--
ALTER TABLE `cmd_class`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `cmd_robot_tag`
--
ALTER TABLE `cmd_robot_tag`
  ADD PRIMARY KEY (`cmd_id`,`robot_tag_id`);

--
-- 資料表索引 `enterprise_type`
--
ALTER TABLE `enterprise_type`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `entities`
--
ALTER TABLE `entities`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_cid` (`cid`);

--
-- 資料表索引 `entity_class`
--
ALTER TABLE `entity_class`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_appid` (`appid`);

--
-- 資料表索引 `entity_files`
--
ALTER TABLE `entity_files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `appid` (`appid`);

--
-- 資料表索引 `ent_account_status`
--
ALTER TABLE `ent_account_status`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `ent_ai_algorithm`
--
ALTER TABLE `ent_ai_algorithm`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name_UNIQUE` (`name`),
  ADD KEY `fk_algorithm_kind_idx` (`kind`);

--
-- 資料表索引 `ent_ai_algorithm_kind`
--
ALTER TABLE `ent_ai_algorithm_kind`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_api`
--
ALTER TABLE `ent_api`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `idx_right_id` (`RIGHT_ID`),
  ADD KEY `idx_url` (`URL`(20));

--
-- 資料表索引 `ent_chat_log_active_date_hour`
--
ALTER TABLE `ent_chat_log_active_date_hour`
  ADD PRIMARY KEY (`DATE`,`HOUR`);

--
-- 資料表索引 `ent_chat_optimization_report_log`
--
ALTER TABLE `ent_chat_optimization_report_log`
  ADD PRIMARY KEY (`date_time`);

--
-- 資料表索引 `ent_check_number`
--
ALTER TABLE `ent_check_number`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_check_token`
--
ALTER TABLE `ent_check_token`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_config`
--
ALTER TABLE `ent_config`
  ADD PRIMARY KEY (`name`),
  ADD KEY `idx_name_module` (`name`(20),`module`(20));

--
-- 資料表索引 `ent_config_appid_customization`
--
ALTER TABLE `ent_config_appid_customization`
  ADD PRIMARY KEY (`name`,`app_id`);

--
-- 資料表索引 `ent_config_industry_customization`
--
ALTER TABLE `ent_config_industry_customization`
  ADD PRIMARY KEY (`name`,`industry_id`);

--
-- 資料表索引 `ent_config_user_customization`
--
ALTER TABLE `ent_config_user_customization`
  ADD PRIMARY KEY (`name`,`user_id`);

--
-- 資料表索引 `ent_config_version`
--
ALTER TABLE `ent_config_version`
  ADD PRIMARY KEY (`user_id`,`app_id`);

--
-- 資料表索引 `ent_functions`
--
ALTER TABLE `ent_functions`
  ADD PRIMARY KEY (`name`);

--
-- 資料表索引 `ent_functions_group`
--
ALTER TABLE `ent_functions_group`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_industry`
--
ALTER TABLE `ent_industry`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_ml_test_case`
--
ALTER TABLE `ent_ml_test_case`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_module`
--
ALTER TABLE `ent_module`
  ADD PRIMARY KEY (`ID`),
  ADD UNIQUE KEY `UNIQUE_NAME` (`Name`(5));

--
-- 資料表索引 `ent_request_log`
--
ALTER TABLE `ent_request_log`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `ent_request_log_archive`
--
ALTER TABLE `ent_request_log_archive`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `ent_right`
--
ALTER TABLE `ent_right`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `idx_name` (`NAME`(20)),
  ADD KEY `idx_moduleid` (`MODULEID`);

--
-- 資料表索引 `ent_role`
--
ALTER TABLE `ent_role`
  ADD PRIMARY KEY (`ID`),
  ADD UNIQUE KEY `NAME_UNIQUE` (`NAME`(3));

--
-- 資料表索引 `ent_solution`
--
ALTER TABLE `ent_solution`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_ssm_dependency`
--
ALTER TABLE `ent_ssm_dependency`
  ADD PRIMARY KEY (`name`),
  ADD KEY `ssm_dependency_typ_idx` (`type`);

--
-- 資料表索引 `ent_ssm_dependency_type`
--
ALTER TABLE `ent_ssm_dependency_type`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `ent_validator`
--
ALTER TABLE `ent_validator`
  ADD PRIMARY KEY (`key`);

--
-- 資料表索引 `frontend_visible`
--
ALTER TABLE `frontend_visible`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `function_switch`
--
ALTER TABLE `function_switch`
  ADD PRIMARY KEY (`function_id`),
  ADD KEY `appid_Idx` (`appid`);

--
-- 資料表索引 `locker`
--
ALTER TABLE `locker`
  ADD PRIMARY KEY (`lock_id`),
  ADD UNIQUE KEY `lock_id_UNIQUE` (`lock_id`);

--
-- 資料表索引 `process_status`
--
ALTER TABLE `process_status`
  ADD PRIMARY KEY (`id`),
  ADD KEY `IDX_app_id` (`app_id`),
  ADD KEY `IDX_app_module` (`app_id`,`module`);

--
-- 資料表索引 `robot_answer`
--
ALTER TABLE `robot_answer`
  ADD PRIMARY KEY (`a_id`),
  ADD KEY `content` (`content`),
  ADD KEY `IDX_a_id` (`a_id`),
  ADD KEY `answer_parent_q_id` (`parent_q_id`);

--
-- 資料表索引 `robot_question`
--
ALTER TABLE `robot_question`
  ADD PRIMARY KEY (`q_id`),
  ADD KEY `content` (`content`),
  ADD KEY `IDX_q_id` (`q_id`);

--
-- 資料表索引 `robot_words`
--
ALTER TABLE `robot_words`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `robot_words_type`
--
ALTER TABLE `robot_words_type`
  ADD PRIMARY KEY (`type`);

--
-- 資料表索引 `state_machine`
--
ALTER TABLE `state_machine`
  ADD PRIMARY KEY (`state_id`),
  ADD KEY `action` (`action`),
  ADD KEY `state` (`status`),
  ADD KEY `user` (`user_id`);

--
-- 資料表索引 `tags`
--
ALTER TABLE `tags`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tag_type`
--
ALTER TABLE `tag_type`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `taskengineapp`
--
ALTER TABLE `taskengineapp`
  ADD PRIMARY KEY (`pk`),
  ADD KEY `appID` (`appID`);

--
-- 資料表索引 `taskenginemappingtable`
--
ALTER TABLE `taskenginemappingtable`
  ADD PRIMARY KEY (`mapping_table_name`);

--
-- 資料表索引 `taskenginescenario`
--
ALTER TABLE `taskenginescenario`
  ADD PRIMARY KEY (`scenarioID`),
  ADD KEY `userID` (`userID`),
  ADD KEY `public` (`public`);

--
-- 資料表索引 `tbl_ai_solution`
--
ALTER TABLE `tbl_ai_solution`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `ai_solution_name` (`name`,`ai_algorithm_id`),
  ADD KEY `fk_algo_id_idx` (`ai_algorithm_id`);

--
-- 資料表索引 `tbl_appid_tree`
--
ALTER TABLE `tbl_appid_tree`
  ADD PRIMARY KEY (`app_id`),
  ADD KEY `ff_idx` (`parent_app_id`);

--
-- 資料表索引 `tbl_chat_log_history_60_days`
--
ALTER TABLE `tbl_chat_log_history_60_days`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `tbl_chat_log_history_archive`
--
ALTER TABLE `tbl_chat_log_history_archive`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `tbl_chat_log_manual_clustering_group_log_map`
--
ALTER TABLE `tbl_chat_log_manual_clustering_group_log_map`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tbl_chat_log_manual_clustering_report`
--
ALTER TABLE `tbl_chat_log_manual_clustering_report`
  ADD PRIMARY KEY (`appid`,`startTime`,`endTime`);

--
-- 資料表索引 `tbl_chat_log_manual_clustering_request_log`
--
ALTER TABLE `tbl_chat_log_manual_clustering_request_log`
  ADD PRIMARY KEY (`pendIndex`);

--
-- 資料表索引 `tbl_chat_log_manual_clustering_tag_group`
--
ALTER TABLE `tbl_chat_log_manual_clustering_tag_group`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tbl_chat_log_past_2_days`
--
ALTER TABLE `tbl_chat_log_past_2_days`
  ADD PRIMARY KEY (`ID`);

--
-- 資料表索引 `tbl_chat_log_statistic_chat_count_60_days`
--
ALTER TABLE `tbl_chat_log_statistic_chat_count_60_days`
  ADD PRIMARY KEY (`APPID`,`DATE`,`HOUR`);

--
-- 資料表索引 `tbl_chat_log_statistic_sq_count_60_days`
--
ALTER TABLE `tbl_chat_log_statistic_sq_count_60_days`
  ADD PRIMARY KEY (`APPID`,`DATE`,`HOUR`,`MATCHED_SQ`);

--
-- 資料表索引 `tbl_chat_optimization_report`
--
ALTER TABLE `tbl_chat_optimization_report`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tbl_chat_optimization_report_request_log`
--
ALTER TABLE `tbl_chat_optimization_report_request_log`
  ADD PRIMARY KEY (`appid`,`request_datetime`);

--
-- 資料表索引 `tbl_chat_optimization_report_tag_group`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group`
  ADD PRIMARY KEY (`id`),
  ADD KEY `FK_REP_ID_idx` (`report_id`);

--
-- 資料表索引 `tbl_chat_optimization_report_tag_group_content`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group_content`
  ADD PRIMARY KEY (`id`),
  ADD KEY `FK2ASDFASDF_idx` (`group_id`);

--
-- 資料表索引 `tbl_exec_sqlq_semblance_status`
--
ALTER TABLE `tbl_exec_sqlq_semblance_status`
  ADD PRIMARY KEY (`appid`),
  ADD UNIQUE KEY `appid_UNIQUE` (`appid`);

--
-- 資料表索引 `tbl_function_group`
--
ALTER TABLE `tbl_function_group`
  ADD PRIMARY KEY (`function_name`,`function_group_id`),
  ADD KEY `fk_function_group_id_idx` (`function_group_id`);

--
-- 資料表索引 `tbl_industry_function_group`
--
ALTER TABLE `tbl_industry_function_group`
  ADD PRIMARY KEY (`industry_id`,`function_group_id`),
  ADD KEY `fk_funtion_group_id_idx` (`function_group_id`),
  ADD KEY `fk_solution_function_solution_id_idx` (`industry_id`);

--
-- 資料表索引 `tbl_lq_semblance_map`
--
ALTER TABLE `tbl_lq_semblance_map`
  ADD PRIMARY KEY (`lq1`,`lq2`,`sq_map_id`);

--
-- 資料表索引 `tbl_ml_test_history`
--
ALTER TABLE `tbl_ml_test_history`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id_UNIQUE` (`id`);

--
-- 資料表索引 `tbl_ml_test_history_archive`
--
ALTER TABLE `tbl_ml_test_history_archive`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id_UNIQUE` (`id`);

--
-- 資料表索引 `tbl_ml_test_result_no_case_text`
--
ALTER TABLE `tbl_ml_test_result_no_case_text`
  ADD PRIMARY KEY (`ml_test_history_id`,`ml_test_case_id`);

--
-- 資料表索引 `tbl_ml_train_history`
--
ALTER TABLE `tbl_ml_train_history`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tbl_robot_apply_state`
--
ALTER TABLE `tbl_robot_apply_state`
  ADD PRIMARY KEY (`appid`),
  ADD UNIQUE KEY `appid_UNIQUE` (`appid`);

--
-- 資料表索引 `tbl_robot_solution`
--
ALTER TABLE `tbl_robot_solution`
  ADD PRIMARY KEY (`robot_api_key`,`solution_id`),
  ADD KEY `fk_solution_id_idx` (`solution_id`);

--
-- 資料表索引 `tbl_robot_ssm_stage`
--
ALTER TABLE `tbl_robot_ssm_stage`
  ADD PRIMARY KEY (`app_id`,`module`);

--
-- 資料表索引 `tbl_robot_tag`
--
ALTER TABLE `tbl_robot_tag`
  ADD PRIMARY KEY (`id`,`app_id`);

--
-- 資料表索引 `tbl_role_right`
--
ALTER TABLE `tbl_role_right`
  ADD PRIMARY KEY (`ROLE_ID`,`RIGHT_ID`);

--
-- 資料表索引 `tbl_semblance_sqlq_calc_status`
--
ALTER TABLE `tbl_semblance_sqlq_calc_status`
  ADD PRIMARY KEY (`pendIndex`);

--
-- 資料表索引 `tbl_solution_stage_lastest_status`
--
ALTER TABLE `tbl_solution_stage_lastest_status`
  ADD PRIMARY KEY (`app_id`,`module`,`stage`);

--
-- 資料表索引 `tbl_sq_category`
--
ALTER TABLE `tbl_sq_category`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tbl_sq_semblance_map`
--
ALTER TABLE `tbl_sq_semblance_map`
  ADD PRIMARY KEY (`appid`,`sq2`,`sq1`);

--
-- 資料表索引 `tbl_upload_corpus_history`
--
ALTER TABLE `tbl_upload_corpus_history`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id_UNIQUE` (`id`);

--
-- 資料表索引 `tbl_upload_ml_test_history`
--
ALTER TABLE `tbl_upload_ml_test_history`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id_UNIQUE` (`id`);

--
-- 資料表索引 `tbl_user_access_token`
--
ALTER TABLE `tbl_user_access_token`
  ADD PRIMARY KEY (`USER_ID`,`access_token`),
  ADD KEY `idx_datatime_accesstoken` (`create_datetime`,`access_token`);

--
-- 資料表索引 `tbl_user_right_special`
--
ALTER TABLE `tbl_user_right_special`
  ADD PRIMARY KEY (`right_id`,`user_id`),
  ADD KEY `FK1_idx` (`right_id`);

--
-- 資料表索引 `tbl_user_stare_robot`
--
ALTER TABLE `tbl_user_stare_robot`
  ADD PRIMARY KEY (`user_id`,`app_id`),
  ADD UNIQUE KEY `idx_appid_userid` (`app_id`,`user_id`),
  ADD KEY `idx_stare_date_time` (`stare_date_time`);

--
-- 資料表索引 `template`
--
ALTER TABLE `template`
  ADD PRIMARY KEY (`id`);

--
-- 在匯出的資料表使用 AUTO_INCREMENT
--

--
-- 使用資料表 AUTO_INCREMENT `api_preduct`
--
ALTER TABLE `api_preduct`
  MODIFY `PreductId` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5069;

--
-- 使用資料表 AUTO_INCREMENT `audit_record`
--
ALTER TABLE `audit_record`
  MODIFY `id` bigint(11) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'audit id', AUTO_INCREMENT=3;

--
-- 使用資料表 AUTO_INCREMENT `cmd`
--
ALTER TABLE `cmd`
  MODIFY `cmd_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- 使用資料表 AUTO_INCREMENT `cmd_class`
--
ALTER TABLE `cmd_class`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `entities`
--
ALTER TABLE `entities`
  MODIFY `id` int(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- 使用資料表 AUTO_INCREMENT `entity_class`
--
ALTER TABLE `entity_class`
  MODIFY `id` int(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=83;

--
-- 使用資料表 AUTO_INCREMENT `entity_files`
--
ALTER TABLE `entity_files`
  MODIFY `id` int(18) NOT NULL AUTO_INCREMENT COMMENT 'id', AUTO_INCREMENT=2;

--
-- 使用資料表 AUTO_INCREMENT `ent_ai_algorithm`
--
ALTER TABLE `ent_ai_algorithm`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id', AUTO_INCREMENT=40;

--
-- 使用資料表 AUTO_INCREMENT `ent_industry`
--
ALTER TABLE `ent_industry`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '行业id', AUTO_INCREMENT=12;

--
-- 使用資料表 AUTO_INCREMENT `ent_ml_test_case`
--
ALTER TABLE `ent_ml_test_case`
  MODIFY `id` int(64) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '测试题id', AUTO_INCREMENT=3;

--
-- 使用資料表 AUTO_INCREMENT `ent_request_log`
--
ALTER TABLE `ent_request_log`
  MODIFY `ID` int(64) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1573782;

--
-- 使用資料表 AUTO_INCREMENT `ent_request_log_archive`
--
ALTER TABLE `ent_request_log_archive`
  MODIFY `ID` int(64) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1564873;

--
-- 使用資料表 AUTO_INCREMENT `ent_right`
--
ALTER TABLE `ent_right`
  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '权限id', AUTO_INCREMENT=41;

--
-- 使用資料表 AUTO_INCREMENT `ent_role`
--
ALTER TABLE `ent_role`
  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id', AUTO_INCREMENT=4;

--
-- 使用資料表 AUTO_INCREMENT `ent_solution`
--
ALTER TABLE `ent_solution`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '解决方案id', AUTO_INCREMENT=13;

--
-- 使用資料表 AUTO_INCREMENT `frontend_visible`
--
ALTER TABLE `frontend_visible`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id', AUTO_INCREMENT=81;

--
-- 使用資料表 AUTO_INCREMENT `function_switch`
--
ALTER TABLE `function_switch`
  MODIFY `function_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '技能id', AUTO_INCREMENT=61;

--
-- 使用資料表 AUTO_INCREMENT `process_status`
--
ALTER TABLE `process_status`
  MODIFY `id` int(18) NOT NULL AUTO_INCREMENT COMMENT 'id', AUTO_INCREMENT=2;

--
-- 使用資料表 AUTO_INCREMENT `robot_answer`
--
ALTER TABLE `robot_answer`
  MODIFY `a_id` int(4) NOT NULL AUTO_INCREMENT COMMENT '形象答案id', AUTO_INCREMENT=79;

--
-- 使用資料表 AUTO_INCREMENT `robot_question`
--
ALTER TABLE `robot_question`
  MODIFY `q_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '形象问题id', AUTO_INCREMENT=51;

--
-- 使用資料表 AUTO_INCREMENT `robot_words`
--
ALTER TABLE `robot_words`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '机器人话述id', AUTO_INCREMENT=31;

--
-- 使用資料表 AUTO_INCREMENT `state_machine`
--
ALTER TABLE `state_machine`
  MODIFY `state_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id';

--
-- 使用資料表 AUTO_INCREMENT `tags`
--
ALTER TABLE `tags`
  MODIFY `id` int(20) NOT NULL AUTO_INCREMENT COMMENT 'id', AUTO_INCREMENT=31;

--
-- 使用資料表 AUTO_INCREMENT `tag_type`
--
ALTER TABLE `tag_type`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT COMMENT '维度id', AUTO_INCREMENT=5;

--
-- 使用資料表 AUTO_INCREMENT `tbl_ai_solution`
--
ALTER TABLE `tbl_ai_solution`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_log_history_60_days`
--
ALTER TABLE `tbl_chat_log_history_60_days`
  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_log_history_archive`
--
ALTER TABLE `tbl_chat_log_history_archive`
  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_log_manual_clustering_group_log_map`
--
ALTER TABLE `tbl_chat_log_manual_clustering_group_log_map`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_log_manual_clustering_tag_group`
--
ALTER TABLE `tbl_chat_log_manual_clustering_tag_group`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_log_past_2_days`
--
ALTER TABLE `tbl_chat_log_past_2_days`
  MODIFY `ID` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_optimization_report`
--
ALTER TABLE `tbl_chat_optimization_report`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_optimization_report_tag_group`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_chat_optimization_report_tag_group_content`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group_content`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_ml_test_history`
--
ALTER TABLE `tbl_ml_test_history`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- 使用資料表 AUTO_INCREMENT `tbl_ml_train_history`
--
ALTER TABLE `tbl_ml_train_history`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1233;

--
-- 使用資料表 AUTO_INCREMENT `tbl_robot_tag`
--
ALTER TABLE `tbl_robot_tag`
  MODIFY `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT 'tag的ID标识', AUTO_INCREMENT=463;

--
-- 使用資料表 AUTO_INCREMENT `tbl_semblance_sqlq_calc_status`
--
ALTER TABLE `tbl_semblance_sqlq_calc_status`
  MODIFY `pendIndex` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `tbl_sq_category`
--
ALTER TABLE `tbl_sq_category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=292;

--
-- 使用資料表 AUTO_INCREMENT `tbl_upload_corpus_history`
--
ALTER TABLE `tbl_upload_corpus_history`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4501;

--
-- 使用資料表 AUTO_INCREMENT `tbl_upload_ml_test_history`
--
ALTER TABLE `tbl_upload_ml_test_history`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表 AUTO_INCREMENT `template`
--
ALTER TABLE `template`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- 已匯出資料表的限制(Constraint)
--

--
-- 資料表的 Constraints `api_user`
--
ALTER TABLE `api_user`
  ADD CONSTRAINT `fk_enterprise_id` FOREIGN KEY (`enterprise_id`) REFERENCES `api_enterprise` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `ent_ai_algorithm`
--
ALTER TABLE `ent_ai_algorithm`
  ADD CONSTRAINT `fk_algorithm_kind` FOREIGN KEY (`kind`) REFERENCES `ent_ai_algorithm_kind` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `ent_ssm_dependency`
--
ALTER TABLE `ent_ssm_dependency`
  ADD CONSTRAINT `ssm_dependency_typ` FOREIGN KEY (`type`) REFERENCES `ent_ssm_dependency_type` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_ai_solution`
--
ALTER TABLE `tbl_ai_solution`
  ADD CONSTRAINT `fk_algo_id` FOREIGN KEY (`ai_algorithm_id`) REFERENCES `ent_ai_algorithm` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_appid_tree`
--
ALTER TABLE `tbl_appid_tree`
  ADD CONSTRAINT `ff` FOREIGN KEY (`parent_app_id`) REFERENCES `tbl_appid_tree` (`app_id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_chat_optimization_report_tag_group`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group`
  ADD CONSTRAINT `FK_REP_ID` FOREIGN KEY (`report_id`) REFERENCES `tbl_chat_optimization_report` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_chat_optimization_report_tag_group_content`
--
ALTER TABLE `tbl_chat_optimization_report_tag_group_content`
  ADD CONSTRAINT `FK2ASDFASDF` FOREIGN KEY (`group_id`) REFERENCES `tbl_chat_optimization_report_tag_group` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_function_group`
--
ALTER TABLE `tbl_function_group`
  ADD CONSTRAINT `fk_function_group_id` FOREIGN KEY (`function_group_id`) REFERENCES `ent_functions_group` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `fk_function_name` FOREIGN KEY (`function_name`) REFERENCES `ent_functions` (`name`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_industry_function_group`
--
ALTER TABLE `tbl_industry_function_group`
  ADD CONSTRAINT `fk_solution_function_function_group_id` FOREIGN KEY (`function_group_id`) REFERENCES `ent_functions_group` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `fk_solution_function_solution_id` FOREIGN KEY (`industry_id`) REFERENCES `ent_industry` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_robot_solution`
--
ALTER TABLE `tbl_robot_solution`
  ADD CONSTRAINT `fk_solution_id` FOREIGN KEY (`solution_id`) REFERENCES `ent_solution` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- 資料表的 Constraints `tbl_user_right_special`
--
ALTER TABLE `tbl_user_right_special`
  ADD CONSTRAINT `TBL_USER_RIGHT_SPECIAL_FK1` FOREIGN KEY (`right_id`) REFERENCES `ent_right` (`ID`) ON DELETE NO ACTION ON UPDATE NO ACTION;


-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`question_answer_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`question_answer_view` (`q_id` INT, `content` INT, `content2` INT, `content3` INT, `content4` INT, `content5` INT, `content6` INT, `content7` INT, `content8` INT, `content9` INT, `content10` INT, `a_id` INT, `answer` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_activate_app`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_activate_app` (`UserId` INT, `Count` INT, `Version` INT, `CreatedTime` INT, `PreductName` INT, `ApiKey` INT, `Status` INT, `MaxCount` INT, `AutoUserID` INT, `NickName` INT, `CommonFunctionIds` INT, `AreaIds` INT, `Type` INT, `MsgType` INT, `Msg` INT, `MsgJson` INT, `template_api_key` INT, `industry_id` INT, `order_no` INT, `appid` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_activate_appid`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_activate_appid` (`appid` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ai_algorithm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ai_algorithm` (`id` INT, `name` INT, `kind` INT, `kind_name` INT, `enabled` INT, `description` INT, `provider` INT, `default_config` INT, `predict_url` INT, `train_url` INT, `test_url` INT, `remove_url` INT, `create_datetime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_appid_tree`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_appid_tree` (`app_id` INT, `group_name` INT, `comment` INT, `child_app_id` INT, `child_group_name` INT, `child_comment` INT, `child_has_child` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_last_hour`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_last_hour` (`APPID` INT, `DATE` INT, `HOUR` INT, `SQ_CHAT_COUNT` INT, `NON_SQ_CHAT_COUNT` INT, `EXEC_TIME` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_last_hour_by_nonsq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_nonsq` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_last_hour_by_solutions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_solutions` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_last_hour_by_sq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_sq` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_recent_all`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_recent_all` (`APPID` INT, `DATE` INT, `HOUR` INT, `SQ_CHAT_COUNT` INT, `NON_SQ_CHAT_COUNT` INT, `EXEC_TIME` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_recent_all_by_nonsq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_recent_all_by_nonsq` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_collect_recent_all_by_sq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_collect_recent_all_by_sq` (`appid` INT, `EXEC_TIME` INT, `DATE` INT, `HOUR` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_history` (`ID` INT, `USER_ID` INT, `APPID` INT, `QUESTION` INT, `ANSWER` INT, `MATCHED_SQ` INT, `RAW_STRING` INT, `SOURCE` INT, `EXEC_TIME` INT, `CREATE_DATETIME` INT, `score` INT, `match_module` INT, `uniqueId` INT, `status` INT, `ignore_status` INT, `badcase_flag` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_maunal_clustering_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_maunal_clustering_group` (`report_id` INT, `group_id` INT, `tag` INT, `num` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_maunal_clustering_group_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_maunal_clustering_group_content` (`id` INT, `question` INT, `ignore_status` INT, `status` INT, `report_id` INT, `group_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_sq_hot_recent_all`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_sq_hot_recent_all` (`appid` INT, `MATCHED_SQ` INT, `DATE` INT, `HOUR` INT, `count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_statistic_chat_count_per_hour`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_statistic_chat_count_per_hour` (`APPID` INT, `DATE` INT, `HOUR` INT, `SQ_CHAT_COUNT` INT, `NON_SQ_CHAT_COUNT` INT, `CHAT_COUNT` INT, `EXEC_TIME` INT, `CREATE_DATETIME` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_statistic_sq_hot_2past_day`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_2past_day` (`APPID` INT, `DATE` INT, `MATCHED_SQ` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_statistic_sq_hot_per_day`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_per_day` (`APPID` INT, `DATE` INT, `MATCHED_SQ` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_statistic_sq_hot_yesterday`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_yesterday` (`APPID` INT, `DATE` INT, `MATCHED_SQ` INT, `COUNT` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_log_statistic_sq_trend`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_log_statistic_sq_trend` (`APPID` INT, `MATCHED_SQ` INT, `_2COUNT` INT, `_1COUNT` INT, `INC` INT, `INC_RATE` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_optimization_report`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_optimization_report` (`report_id` INT, `appid` INT, `date_from` INT, `date_to` INT, `unidentified_chat_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_chat_optimization_report_tag_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_chat_optimization_report_tag_group` (`report_id` INT, `group_id` INT, `tag` INT, `unidentified_chat_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_case_count`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_case_count` (`app_id` INT, `label_sq` INT, `space` INT, `test_case_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_correct_count`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_correct_count` (`ml_test_history_id` INT, `app_id` INT, `correct_count` INT, `test_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_correct_rate`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_correct_rate` (`ml_test_history_id` INT, `correct_count` INT, `app_id` INT, `test_count` INT, `correct_rate` INT, `correct_rate_text` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_correct_rate_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_correct_rate_details` (`app_id` INT, `label_sq` INT, `test_case_count` INT, `space` INT, `ml_test_history_id` INT, `test_count` INT, `correct_count` INT, `correct_rate` INT, `correct_rate_text` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_history` (`id` INT, `app_id` INT, `date_time` INT, `correct_count` INT, `test_count` INT, `correct_rate` INT, `correct_rate_text` INT, `status` INT, `train_result_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_history_with_train_model`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_history_with_train_model` (`id` INT, `app_id` INT, `date_time` INT, `correct_count` INT, `test_count` INT, `correct_rate` INT, `correct_rate_text` INT, `status` INT, `train_result_id` INT, `algo_kind_name` INT, `algo_name` INT, `algo_solution_name` INT, `algo_id` INT, `algo_kind_id` INT, `algo_solution_id` INT, `model_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_lastest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_lastest` (`id` INT, `app_id` INT, `date_time` INT, `status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_lastest_correct_rate_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_lastest_correct_rate_details` (`app_id` INT, `label_sq` INT, `test_case_count` INT, `ml_test_history_id` INT, `test_count` INT, `correct_count` INT, `correct_rate` INT, `correct_rate_text` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_lastest_datetime`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_lastest_datetime` (`app_id` INT, `date_time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_lastest_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_lastest_history` (`id` INT, `app_id` INT, `date_time` INT, `correct_count` INT, `test_count` INT, `correct_rate` INT, `correct_rate_text` INT, `status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_lastest_result`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_lastest_result` (`test_case_id` INT, `app_id` INT, `ml_test_history_id` INT, `question` INT, `label_sq` INT, `matched_sq` INT, `right` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_result`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_result` (`test_case_id` INT, `app_id` INT, `ml_test_history_id` INT, `question` INT, `label_sq` INT, `matched_sq` INT, `right` INT, `score` INT, `source` INT, `space` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_result_correct_count_by_sq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_result_correct_count_by_sq` (`app_id` INT, `ml_test_history_id` INT, `label_sq` INT, `space` INT, `correct_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_result_count`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_result_count` (`ml_test_history_id` INT, `test_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_test_result_count_by_sq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_test_result_count_by_sq` (`app_id` INT, `ml_test_history_id` INT, `label_sq` INT, `space` INT, `test_count` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_ml_train_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_ml_train_history` (`id` INT, `app_id` INT, `algo_kind_id` INT, `algo_kind_name` INT, `algo_name` INT, `algo_solution_name` INT, `status` INT, `model_id` INT, `result` INT, `create_datetime` INT, `update_datetime` INT, `algo_id` INT, `algo_solution_id` INT, `train_url` INT, `config` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_request_exception`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_request_exception` (`request_id` INT, `client_ip` INT, `method` INT, `path_info` INT, `request_info` INT, `request_raw_body` INT, `response_body` INT, `create_datetime` INT, `exec_time` INT, `error_code` INT, `error_message` INT, `exception_type` INT, `exception_trace` INT, `version` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_request_for_operater_log_level1`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_request_for_operater_log_level1` (`create_datetime` INT, `user_id` INT, `path_info` INT, `request_info` INT, `request_raw_body` INT, `appid_in_request_info` INT, `appid_in_request_raw` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_request_for_operater_log_level2`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_request_for_operater_log_level2` (`USER_ID` INT, `SHOW_IN_OP_LOG` INT, `URL` INT, `MESSAGE` INT, `create_datetime` INT, `path_info` INT, `request_info` INT, `request_raw_body` INT, `app_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_request_for_operater_log_level3`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_request_for_operater_log_level3` (`create_datetime` INT, `message` INT, `user_id` INT, `app_id` INT, `path_info` INT, `request_info` INT, `request_raw_body` INT, `robot_name` INT, `user_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_request_info`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_request_info` (`request_id` INT, `client_ip` INT, `method` INT, `path_info` INT, `request_info` INT, `request_raw_body` INT, `response_body` INT, `create_datetime` INT, `exec_time` INT, `error_code` INT, `error_message` INT, `exception_type` INT, `exception_trace` INT, `version` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_right_module`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_right_module` (`Name` INT, `ModuleName` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_robot_solutions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_robot_solutions` (`solution_id` INT, `robot_api_key` INT, `solution_name` INT, `executor` INT, `solution_description` INT, `show_in_solution_list` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_upload_corpus_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_upload_corpus_history` (`id` INT, `user_id` INT, `app_id` INT, `is_part` INT, `type` INT, `type_text` INT, `is_part_text` INT, `comments` INT, `download_path` INT, `raw_file_path` INT, `valid_rows` INT, `date_time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_upload_test_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_upload_test_history` (`id` INT, `app_id` INT, `user_id` INT, `is_part` INT, `comments` INT, `is_part_text` INT, `download_path` INT, `raw_file_path` INT, `rows` INT, `date_time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_upload_userlog_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_upload_userlog_history` (`id` INT, `user_id` INT, `app_id` INT, `is_part` INT, `type` INT, `type_text` INT, `is_part_text` INT, `comments` INT, `download_path` INT, `raw_file_path` INT, `valid_rows` INT, `date_time` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_user` (`UserId` INT, `Phone` INT, `Email` INT, `CreatedTime` INT, `Password` INT, `UserName` INT, `Gender` INT, `Type` INT, `Status` INT, `account_status` INT, `UpdatedTime` INT, `Owner` INT, `Remark` INT, `AiNickName` INT, `Msg` INT, `enterprise_id` INT, `roleid` INT, `enterprise_name` INT, `account_type` INT, `customer_manager` INT, `super_user_email` INT, `super_user_phone` INT, `project_leader` INT, `enterprise_account_status` INT, `is_remove` INT, `business_card` INT, `enterprise_remark` INT, `enterprise_type` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_user_lastest_stared_robot`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_user_lastest_stared_robot` (`user_id` INT, `app_id` INT, `lastest_stared_datetime` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_user_role_ex`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_user_role_ex` (`ID` INT, `NAME` INT, `DESCRIPTION` INT, `enabled` INT, `enabledStr` INT);

-- -----------------------------------------------------
-- Placeholder table for view `emotibot`.`view_valid_robot`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emotibot`.`view_valid_robot` (`nickname` INT, `apikey` INT);

-- -----------------------------------------------------
-- function FUNC_GET_APPID_IN_REQUEST_INFO
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS FUNC_GET_APPID_IN_REQUEST_INFO;
CREATE DEFINER=`root`@`%` FUNCTION `FUNC_GET_APPID_IN_REQUEST_INFO`(`_text` LONGTEXT) RETURNS varchar(50) CHARSET utf8mb4
BEGIN

 set _text = lower(_text);
 set _text = replace(_text, 'app_id', 'appid');
 
 set _text = (case when JSON_VALID(_text) then json_extract(_text, '$.appid') else null end);
return REPLACE(_text, '"', '');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function FUNC_GET_CURR_HOUR
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS FUNC_GET_CURR_HOUR;
CREATE DEFINER=`root`@`%` FUNCTION `FUNC_GET_CURR_HOUR`() RETURNS timestamp
BEGIN

RETURN  (DATE_ADD( DATE(NOW()), INTERVAL   HOUR(NOW())  HOUR));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function FUNC_GET_LAST_HOUR
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS FUNC_GET_LAST_HOUR;
CREATE DEFINER=`root`@`%` FUNCTION `FUNC_GET_LAST_HOUR`() RETURNS timestamp
BEGIN

RETURN  DATE_ADD(FUNC_GET_CURR_HOUR()  , INTERVAL -1 HOUR);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function FUNC_GET_VALIDATOR_MESSAGE
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS FUNC_GET_VALIDATOR_MESSAGE;
CREATE DEFINER=`root`@`%` FUNCTION `FUNC_GET_VALIDATOR_MESSAGE`(_key varchar(128)) RETURNS varchar(4000) CHARSET utf8mb4
BEGIN

RETURN  (SELECT `value` FROM ent_config WHERE NAME = _key AND enabled = 1 and module = 'validator');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_app_id_has_child
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_app_id_has_child;
CREATE DEFINER=`root`@`%` FUNCTION `func_app_id_has_child`($app_id varchar(50)) RETURNS bit(1)
BEGIN

RETURN exists (SELECT app_id from tbl_appid_tree where  parent_app_id = $app_id) ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_appid
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_appid;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_appid`(request_info longtext, request_raw_body longtext, _path_info varchar(4000)) RETURNS varchar(50) CHARSET utf8mb4
BEGIN

	 declare _app_id varchar(50);
    
    set _app_id = (select emotibot.func_get_appid_in_request_info(request_info));
    
    if _app_id  is null then
		set _app_id = (select emotibot.func_get_appid_in_request_info(request_raw_body ));
        
		if _app_id is  null then
			set _app_id = (
			SELECT REPLACE(_path_info,
                `ent_api`.`URL`,
                '')  from ent_api  where  _path_info LIKE CONCAT(`ent_api`.`URL`, '%'));
		end if;
	end if;
    
    return _app_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_appname_by_appid
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_appname_by_appid;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_appname_by_appid`(_appid varchar(50)) RETURNS varchar(200) CHARSET utf8mb4
BEGIN

RETURN  (SELECT 
                `view_valid_robot`.`nickname`
            FROM
                `view_valid_robot`
            WHERE
                (`view_valid_robot`.apikey = _appid));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_config
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_config;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_config`(_appId varchar(60), _userId varchar(60), _name varchar(500)) RETURNS varchar(4000) CHARSET utf8mb4
BEGIN

	declare configValue varchar(4000);
	
	set configValue = (select `value` from `ent_config_appid_customization` where name = _name and app_id = _appId);    
    
    if configValue is not null then
		return configValue;
    end if;
    
	set configValue = (select `value` from `ent_config_user_customization` where name = _name and user_id = _userId);    
    
    if configValue is not null then
		return configValue;
    end if;
    
    set configValue = (select `value` from ent_config where name = _name);
    

	RETURN configValue;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_config_version
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_config_version;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_config_version`() RETURNS datetime
BEGIN

RETURN (select version_value from ent_config_version limit 0, 1);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_parent_id
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_parent_id;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_parent_id`($app_id nvarchar(50)) RETURNS varchar(50) CHARSET utf8
BEGIN



RETURN (SELECT  parent_app_id FROM emotibot.tbl_appid_tree   where app_id = $app_id limit 0, 1);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_get_username_by_userid
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_get_username_by_userid;
CREATE DEFINER=`root`@`%` FUNCTION `func_get_username_by_userid`(_userid varchar(50)) RETURNS varchar(200) CHARSET utf8mb4
BEGIN 

RETURN (SELECT 
                `api_user`.`NickName`
            FROM
                `api_user`
            WHERE
                (api_user.`USERID` = _userid));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_has_new_config_version
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_has_new_config_version;
CREATE DEFINER=`root`@`%` FUNCTION `func_has_new_config_version`(current_version datetime) RETURNS bit(1)
BEGIN

RETURN exists(select * from ent_config_version where version_value > current_version);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function func_has_same_nickname
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP FUNCTION IF EXISTS func_has_same_nickname;
CREATE DEFINER=`root`@`%` FUNCTION `func_has_same_nickname`(
arg_userid varchar(45) ,
arg_appid varchar(50) ,

arg_nickname varchar(255) charset utf8) RETURNS bit(1)
BEGIN

RETURN 
(
	case 
		  when arg_appid is null 
          then  exists(select * from api_userkey where userid = arg_userid and arg_nickname = nickname and `Status` = 1)
		  else 
				exists(select * from api_userkey where userid = arg_userid and arg_nickname = nickname and `Status` = 1 and arg_appid <> apikey)
		  end
);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_app_id_addnode
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_app_id_addnode;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_app_id_addnode`(
	$app_id varchar(50),
	$comment varchar(5000) charset utf8,
	$parent_app_id varchar(50),
	$group_name varchar(50)
)
BEGIN


	
    
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_app_id_get_parents
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_app_id_get_parents;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_app_id_get_parents`(_appid varchar(50))
BEGIN

    declare $appid varchar(50) charset utf8;
    declare  l int;
    
    set l = 0;
    set $appid = _appid;

	create temporary table  if not exists `parent_list`
			 (  
			   `appid` varchar(50)  ,
			  `parentId` varchar(50),
              `level` int,
               PRIMARY KEY (`appid`, `parentId`)
			 ) ENGINE = MEMORY;  

 	   getparents : loop
			set $appid  = func_get_parent_id($appid);
			set l = l + 1;
            if $appid  is not null then
				replace `parent_list`(`appid`, `parentId`, `level`) values (_appid, $appid, l);
			else
				leave getparents;
			end if;
            
            
       end loop;
        
	select parent_list.appid 
		, A.group_name as group_name
		, A.comment as comment
		, parent_list.parentId
		, B.group_name parent_group_name
		, B.comment parent_comment
		, parent_list.level parent_level 

	from parent_list
		inner join
	tbl_appid_tree B
	on
	(
		B.app_id = parent_list.parentId
	)
	inner join
	tbl_appid_tree A
	on
	(
		A.app_id = parent_list.appid
	)


	where `appid` = _appid
    order by parent_list.level asc;

    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_archive
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_archive;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_archive`(
	_source varchar(100),
    _destination varchar (100),
    _conditions varchar (400)
)
BEGIN

	DECLARE sqlCopy VARCHAR(8000);
	DECLARE sqlDelete VARCHAR(8000);
    
    SET sqlCopy =  CONCAT('	INSERT INTO '
							, _destination 
							, 'SELECT * FROM '
                            , _source
                            , ' WHERE '
                            , _conditions
						 );
                         
    SELECT sqlCopy;
    
	SET @SQL_COPY = sqlCopy;
	PREPARE ST_COPY FROM @SQL_COPY;
	EXECUTE ST_COPY;
	DEALLOCATE PREPARE ST_COPY ;

    SET sqlDelete =  CONCAT('	DELETE  FROM '
							, _source  
                            , ' WHERE '
                            , _conditions
						 );
	
    SELECT sqlDelete;
    
	SET @SQL_DELETE = sqlDelete;
	PREPARE ST_DELETE FROM @SQL_DELETE;
	EXECUTE ST_DELETE;
	DEALLOCATE PREPARE ST_DELETE ;
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_collection_last_day
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_collection_last_day;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_collection_last_day`()
BEGIN













 INSERT INTO `tbl_chat_log_history_60_days`
 (`ID`,
`USER_ID`,
`APPID`,
`QUESTION`,
`ANSWER`,
`MATCHED_SQ`,
`RAW_STRING`,
`SOURCE`,
`EXEC_TIME`,
`CREATE_DATETIME`,
`score`,
`match_module`,
`uniqueId`,
`status`)
 
SELECT `tbl_chat_log_past_2_days`.`ID`,
    `tbl_chat_log_past_2_days`.`USER_ID`,
    `tbl_chat_log_past_2_days`.`APPID`,
    `tbl_chat_log_past_2_days`.`QUESTION`,
    `tbl_chat_log_past_2_days`.`ANSWER`,
    `tbl_chat_log_past_2_days`.`MATCHED_SQ`,
    `tbl_chat_log_past_2_days`.`RAW_STRING`,
    `tbl_chat_log_past_2_days`.`SOURCE`,
    `tbl_chat_log_past_2_days`.`EXEC_TIME`,
    `tbl_chat_log_past_2_days`.`CREATE_DATETIME`,
    `tbl_chat_log_past_2_days`.`score`,
    `tbl_chat_log_past_2_days`.`match_module`,
    `tbl_chat_log_past_2_days`.`uniqueId`,
    `tbl_chat_log_past_2_days`.`status` 
FROM `emotibot`.`tbl_chat_log_past_2_days`
where datediff(now(), CREATE_DATETIME) > 2
order by CREATE_DATETIME desc;


delete from tbl_chat_log_past_2_days 
where datediff(now(), CREATE_DATETIME) > 2
order by CREATE_DATETIME desc;


INSERT INTO `emotibot`.`tbl_chat_log_history_archive`
(`ID`,
`USER_ID`,
`APPID`,
`QUESTION`,
`ANSWER`,
`MATCHED_SQ`,
`SOURCE`,
`RAW_STRING`,
`EXEC_TIME`,
`CREATE_DATETIME`,
`uniqueId`,
`score`,
`match_module`,
`status`)
SELECT `tbl_chat_log_history_60_days`.`ID`,
    `tbl_chat_log_history_60_days`.`USER_ID`,
    `tbl_chat_log_history_60_days`.`APPID`,
    `tbl_chat_log_history_60_days`.`QUESTION`,
    `tbl_chat_log_history_60_days`.`ANSWER`,
    `tbl_chat_log_history_60_days`.`MATCHED_SQ`,
    `tbl_chat_log_history_60_days`.`SOURCE`,
    `tbl_chat_log_history_60_days`.`RAW_STRING`,
    `tbl_chat_log_history_60_days`.`EXEC_TIME`,
    `tbl_chat_log_history_60_days`.`CREATE_DATETIME`,
    `tbl_chat_log_history_60_days`.`uniqueId`,
    `tbl_chat_log_history_60_days`.`score`,
    `tbl_chat_log_history_60_days`.`match_module`,
    `tbl_chat_log_history_60_days`.`status`
FROM `emotibot`.`tbl_chat_log_history_60_days`
where datediff(now(), CREATE_DATETIME) > 60
order by CREATE_DATETIME desc;

delete from tbl_chat_log_history_60_days
where  datediff(now(), CREATE_DATETIME) > 60;




 

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_collection_last_hour
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_collection_last_hour;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_collection_last_hour`()
BEGIN

 

		

		INSERT INTO `emotibot`.`tbl_chat_log_statistic_chat_count_60_days`
		( 
		`APPID`,
		`DATE`,
		`HOUR`,
		`SQ_CHAT_COUNT`,
		`NON_SQ_CHAT_COUNT`,
		`EXEC_TIME`)
        SELECT * FROM view_chat_log_collect_last_hour;
        
        
        INSERT INTO `emotibot`.`ent_chat_log_active_date_hour`
		SELECT 
        CAST((NOW() + INTERVAL -(1) HOUR) AS DATE) AS `DATE`,
        HOUR((NOW() + INTERVAL -(1) HOUR)) AS `HOUR`;
        
		
		INSERT INTO `emotibot`.`tbl_chat_log_statistic_sq_count_60_days`
		( 
		`APPID`,
		`DATE`,
		`HOUR`,
		`MATCHED_SQ`,
        `COUNT`)
		SELECT 
			 
			`tbl_chat_log_past_2_days`.`APPID` AS `appid`,
			CAST(`tbl_chat_log_past_2_days`.`CREATE_DATETIME`
				AS DATE) AS `DATE`,
			HOUR(`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,
			`tbl_chat_log_past_2_days`.`MATCHED_SQ` AS `MATCHED_SQ`,
			COUNT(`tbl_chat_log_past_2_days`.`QUESTION`) AS `count`
		FROM
			`tbl_chat_log_past_2_days`
		WHERE
			(`tbl_chat_log_past_2_days`.`MATCHED_SQ` IS NOT NULL
            AND `source` = 'faq'
			AND (`tbl_chat_log_past_2_days`.`CREATE_DATETIME` BETWEEN FUNC_GET_LAST_HOUR() AND FUNC_GET_CURR_HOUR())

			)			
		GROUP BY  
        `tbl_chat_log_past_2_days`.`APPID` 
        , `DATE` 
        , `HOUR` 
        , `tbl_chat_log_past_2_days`.`MATCHED_SQ`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_collection_recent_all
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_collection_recent_all;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_collection_recent_all`()
BEGIN

 

		replace `emotibot`.`tbl_chat_log_statistic_chat_count_60_days`
		( 
		`APPID`,
		`DATE`,
		`HOUR`,
		`SQ_CHAT_COUNT`,
		`NON_SQ_CHAT_COUNT`,
		`EXEC_TIME`)
        select * from  view_chat_log_collect_recent_all;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_collection_sq_hot_recent_all
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_collection_sq_hot_recent_all;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_collection_sq_hot_recent_all`()
BEGIN

 

		replace `emotibot`.`tbl_chat_log_statistic_sq_count_60_days`
		(
		`APPID`,
		`DATE`,
		`HOUR`,
		`MATCHED_SQ`,
        `COUNT`)

		SELECT  
			`view_chat_log_sq_hot_recent_all`.`appid`,
			`view_chat_log_sq_hot_recent_all`.`DATE`,
			`view_chat_log_sq_hot_recent_all`.`HOUR`,
			`view_chat_log_sq_hot_recent_all`.`MATCHED_SQ`,
			`view_chat_log_sq_hot_recent_all`.`count`
		FROM `emotibot`.`view_chat_log_sq_hot_recent_all` ;

        
		


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_log_save_label
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_log_save_label;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_log_save_label`(
	_appid varchar(100),
    _question varchar(4000) charset utf8,
    _status char(1)
)
BEGIN
	
UPDATE `emotibot`.`tbl_chat_log_past_2_days`
SET
 `status` = _status
WHERE `APPID` = _appid AND `QUESTION` = _question;

UPDATE `emotibot`.`tbl_chat_log_history_60_days`
SET
 `status` = _status
WHERE `APPID` = _appid AND `QUESTION` = _question;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_chat_optimization_save_label
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_chat_optimization_save_label;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_chat_optimization_save_label`(
	_group_id int,
    _content varchar(4000) charset utf8
)
BEGIN
	
UPDATE `emotibot`.`tbl_chat_optimization_report_tag_group_content`
SET
 `labeled` = NOT `labeled`
WHERE `group_id` = _group_id AND `content` = _content;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_data_archive
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_data_archive;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_data_archive`(
	 _source varchar(250),
     _conditions varchar (3000)
)
BEGIN


	DECLARE sqlCopy VARCHAR(8000);
	DECLARE sqlDelete VARCHAR(8000);
    DECLARE _destination VARCHAR(250);
    set _destination = concat( _source ,  '_archive');
    
    SET sqlCopy =  CONCAT('	INSERT INTO '
							, _destination 
							, ' SELECT * FROM '
                            , _source
                            , ' WHERE '
                            , _conditions
						 );
                         
    SELECT sqlCopy;
    
	SET @SQL_COPY = sqlCopy;
	PREPARE ST_COPY FROM @SQL_COPY;
	EXECUTE ST_COPY;
	DEALLOCATE PREPARE ST_COPY ;

    SET sqlDelete =  CONCAT('	DELETE  FROM '
							, _source  
                            , ' WHERE '
                            , _conditions
						 );
	
    SELECT sqlDelete;
    
	SET @SQL_DELETE = sqlDelete;
	PREPARE ST_DELETE FROM @SQL_DELETE;
	EXECUTE ST_DELETE;
	DEALLOCATE PREPARE ST_DELETE ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_delete_lq_semblance_map
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_delete_lq_semblance_map;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_delete_lq_semblance_map`(IN `_appid` VARCHAR(100), IN `lq` VARCHAR(4000) CHARSET utf8mb4)
BEGIN

		delete from emotibot.tbl_lq_semblance_map where (appid = _appid) and (lq1 = lq or lq2 = lq);    
                
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_delete_sqlq_semblance_map
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_delete_sqlq_semblance_map;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_delete_sqlq_semblance_map`(IN `_appid` VARCHAR(100), IN `sq` VARCHAR(4000) CHARSET utf8mb4)
BEGIN


		delete from emotibot.tbl_lq_semblance_map where sq_map_id in (select GROUP_CONCAT(appid, sq1, sq2)  from emotibot.tbl_sq_semblance_map where appid = _appid and (sq1 = sq or sq2 = sq));

		delete from emotibot.tbl_sq_semblance_map where appid = _appid and (sq1 = sq or sq2 = sq);
                
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_delete_tag
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_delete_tag;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_delete_tag`(IN appid VARCHAR(100),  IN tag_id VARCHAR(100))
BEGIN
		
        DECLARE state INT;
        
		IF EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE app_id = appid AND id = tag_id) THEN
				
				IF EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE app_id = appid AND ( app_id != 'system' AND type != 'system') AND  id = tag_id) THEN
				                 
                
						DELETE  FROM `emotibot`.`tbl_robot_tag`
								WHERE  app_id = appid AND id = tag_id AND type = 'userdefine';
				
						SET state = 0;
                
                ELSE
						SET state = 2;
                
                END IF;
            
		ELSE
			
				SET state = 1;
		END IF;
        
				
		SELECT state;
                
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_dump_user_info_by_access_token
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_dump_user_info_by_access_token;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_dump_user_info_by_access_token`(_token varchar(100))
BEGIN
 	
 
	select * from api_user where userid = (
		SELECT  user_id  FROM tbl_user_access_token
        WHERE 
            TIMESTAMPDIFF(SECOND, create_datetime, NOW()) <= expiration
        AND ACCESS_TOKEN = _token);
        
        
 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_find_auth
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_find_auth;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_find_auth`(_phone varchar(50))
BEGIN
select * from auth where phone = _phone;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_gen_access_token
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_gen_access_token;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_gen_access_token`(_user_id varchar(60))
BEGIN
	
    
    
	
    
    
    
    
		
		
		INSERT INTO  `tbl_user_access_token`
		(`USER_ID`,
		`access_token`,
		`expiration`,
		`create_datetime`)
		VALUES
		(_USER_ID,
		  concat(md5(concat(now(), _USER_ID)) , '-' , sha1(rand())) ,
		  (select `value` from ent_config where name = 'access_token_expiration'),
		now());
    
    
    
    select * from tbl_user_access_token where USER_ID = _user_id order by create_datetime desc limit 1;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_config
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_config;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_config`(
	_appId  varchar(50),
	_name   varchar(50)    
)
BEGIN

	
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_proccessor
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_proccessor;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_proccessor`(_ns varchar(4000))
BEGIN

		
         
         select proccessor from ent_lyframework_proccessor where ns = _ns;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_recent_result
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_recent_result;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_recent_result`(IN appid varchar(100), IN num int(5))
BEGIN
SET @rn=0;
set @appid='';
select app_id, id, correct_rate, correct_rate_text, date_time
from
(SELECT app_id, id, correct_rate, correct_rate_text, date_time,
IF(@appid = app_id, @rn := @rn + 1, @rn := 1) AS rn,
@appid := app_id AS appid
FROM emotibot.view_ml_test_history
where status = 'done'
and app_id = appid
order by 1, 2 desc) tmp
where rn <= num;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_robot_stage_info
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_robot_stage_info;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_robot_stage_info`(IN appid VARCHAR(100),  IN stage INT)
BEGIN
        
        SELECT * FROM emotibot.view_robot_info_list WHERE (robot_id = appid AND robot_stage = stage);
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_tag_by_id
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_tag_by_id;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_tag_by_id`(IN appid VARCHAR(100),  IN tag_id VARCHAR(100) )
BEGIN
        
        SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND id = tag_id ORDER BY createtime desc;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_tag_by_name
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_tag_by_name;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_tag_by_name`(IN appid VARCHAR(100),  IN tag_name VARCHAR(50) charset utf8 )
BEGIN
        
        SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name = tag_name ORDER BY createtime desc;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_get_tag_list
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_get_tag_list;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_get_tag_list`(IN appid VARCHAR(100) )
BEGIN
        
        SELECT * FROM emotibot.tbl_robot_tag WHERE app_id = appid  OR ( app_id = 'system' AND type = 'system') ORDER BY createtime desc;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_manual_trigger
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_manual_trigger;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_manual_trigger`(_appId varchar(60), _userId varchar(60), _uniqueId varchar(60), _emotion varchar(100), _intent varchar(100), _source varchar(100), debug  int )
BEGIN
	  declare configValue varchar(4000);	      
      declare limi int;
      declare manual int;
      declare backfill_count int;
      
      set manual = 0;
      
      if `func_get_config`(_appId,_userId, 'manual_assist') = 'true' then
      
      if debug = 1 then
		select 'manual_assist is true';
      end if;
      
		  set configValue = `func_get_config`(_appId,_userId, 'manual_assist_rule_trigger_by_backfill_count');
		  set limi = cast(configValue as   SIGNED);

		  if debug = 1 then
			  select 'manual_assist_rule_trigger_by_backfill_count', limi;
		  end if;
		  
          set backfill_count = (select count(recent_source.`source`) from 
				(
					SELECT  `source`
					FROM    `tbl_chat_log_past_2_days` 
					where 
						 APPID    = _appId 
					and  USER_ID  = _userId
					and  uniqueId = _uniqueId 
					order by CREATE_DATETIME desc limit limi
				) AS recent_source
				
				where recent_source.source = 'backfill');
                
			if _source = 'backfill' then
				set backfill_count = backfill_count + 1;
            end if;
          
		  if `func_get_config`(_appId,_userId, 'manual_assist_rule') = 'true' and  backfill_count >= limi then
            
			  if debug = 1 then
				  select 'manual_assist_rule is true', limi as limi, backfill_count as backfill_count;
			  end if;
            
			set manual = 1;
		  end if;
          
		  if `func_get_config`(_appId,_userId, 'manual_assist_rule_trigger_by_emotion') = 'true' and  
          exists (select 1 from ent_config  where _emotion in ('愤怒') limit 1)
          then
			  if debug = 1 then
				  select 'manual_assist_rule_trigger_by_emotion is true', _emotion as _emotion;
			  end if;
          
			set manual = 1;
		  end if;          

		  if `func_get_config`(_appId,_userId, 'manual_assist_rule_trigger_by_intent') = 'true' and  
          exists (select 1 from ent_config  where _intent in ('转人工') limit 1)
          then
			  if debug = 1 then
				  select 'manual_assist_rule_trigger_by_intent is true', _intent as _intent;
			  end if;
          
			set manual = 1;
		  end if;          
          
          if (manual = 1) then
          		select  'to_manual' as source, `func_get_config`(_appId,_userId, 'manual_assist_message') as answer;
		  end if;

		end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_request_log_archive_last_day
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_request_log_archive_last_day;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_request_log_archive_last_day`()
BEGIN

   declare tblCondition varchar(2000);
   declare entCondition varchar(2000);
   
   set    tblCondition = ' request_id in (select id from ent_request_log where datediff(now(), CREATE_DATETIME) >= 1)';
   set    entCondition = ' datediff(now(), CREATE_DATETIME) >= 1 ';

   call  sp_data_archive('tbl_request_log', tblCondition);
   call  sp_data_archive('tbl_request_exception', tblCondition);
   call  sp_data_archive('tbl_request_response', tblCondition);
   call  sp_data_archive('ent_request_log', entCondition);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_chat_history
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_chat_history;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_chat_history`(
	_USER_ID varchar(50) ,
	_APPID varchar(50),
	_QUESTION varchar(5000) charset utf8mb4,
	_ANSWER mediumtext charset utf8mb4, 
	_MATCHED_SQ varchar(200) charset utf8mb4,
	_SOURCE varchar(200) ,
	_EXEC_TIME int(11) ,
	_RAW_STRING  mediumtext charset utf8mb4,
    _uniqueId varchar(50),
    _score DOUBLE,
    _match_module varchar(200)  charset utf8mb4, 
    _status char(1)
 )
BEGIN
	INSERT INTO `emotibot`.`tbl_chat_log_past_2_days`
	(
	`USER_ID`,
	`APPID`,
	`QUESTION`,
	`ANSWER`,
	`MATCHED_SQ`,
	`SOURCE`,
	`EXEC_TIME`,
	`RAW_STRING`,
    `uniqueId`,
    `score`,
    `match_module`,
    `status`
	)
	VALUES
	( 
	_USER_ID,
	_APPID,
	_QUESTION,
	_ANSWER,
	_MATCHED_SQ,
	_SOURCE,
	_EXEC_TIME,
	_RAW_STRING,
    _uniqueId,_score,_match_module,_status
	);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_chat_history_withoutput
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_chat_history_withoutput;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_chat_history_withoutput`(
	_USER_ID varchar(50) ,
	_APPID varchar(50),
	_QUESTION varchar(5000) charset utf8mb4,
	_ANSWER mediumtext charset utf8mb4, 
	_MATCHED_SQ varchar(200) charset utf8mb4,
	_SOURCE varchar(200) ,
	_EXEC_TIME int(11) ,
	_RAW_STRING  mediumtext charset utf8mb4,
    _uniqueId varchar(50),
    _score DOUBLE,
    _match_module varchar(200)  charset utf8mb4, 
    _status char(1)
 )
BEGIN
	INSERT INTO `emotibot`.`tbl_chat_log_past_2_days`
	(
	`USER_ID`,
	`APPID`,
	`QUESTION`,
	`ANSWER`,
	`MATCHED_SQ`,
	`SOURCE`,
	`EXEC_TIME`,
	`RAW_STRING`,
    `uniqueId`,
    `score`,
    `match_module`,
    `status`
	)
	VALUES
	( 
	_USER_ID,
	_APPID,
	_QUESTION,
	_ANSWER,
	_MATCHED_SQ,
	_SOURCE,
	_EXEC_TIME,
	_RAW_STRING,
    _uniqueId,_score,_match_module,_status
	);
    
    SELECT ID FROM `emotibot`.`tbl_chat_log_past_2_days` WHERE USER_ID = _USER_ID AND APPID = _APPID ORDER BY CREATE_DATETIME DESC LIMIT 1;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_ml_test_case
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_ml_test_case;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_ml_test_case`(
	arg_id int,
    arg_app_id varchar(45) ,
    arg_question varchar(4000) charset utf8,
    arg_label_sq varchar(4000) charset utf8,
    arg_create_by_batch_mode bit(1)
)
BEGIN


if (IFNULL(arg_id, 0) = 0) then 
	insert  `emotibot`.`ent_ml_test_case`
	(
		`app_id`,
		`question`,
		`label_sq`,
		`create_by_batch_mode`
	)
	VALUES
	(
		arg_app_id ,
		arg_question ,
		arg_label_sq ,
		arg_create_by_batch_mode
	);
else

	DELETE FROM  `tbl_ml_test_result_no_case_text` WHERE ml_test_case_id = arg_id;
 
    
	UPDATE `emotibot`.`ent_ml_test_case`
	SET 
	`question` = arg_question,
	`label_sq` = arg_label_sq,
	`update_datetime` = CURRENT_TIMESTAMP
	WHERE `id` = arg_id;

end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_system_tag
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_system_tag;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_system_tag`(IN tag_name VARCHAR(50) charset utf8
																,  IN tag_category VARCHAR(50) charset utf8
                                                                ,  IN create_time DATETIME,  IN description VARCHAR(500) charset utf8)
BEGIN

        DECLARE state INT;
        
        IF NOT EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE app_id = 'system' AND type = 'system' AND name = tag_name) THEN
			
				INSERT INTO `emotibot`.`tbl_robot_tag`
						(`app_id`
                        , `name`
                        , `type`
                        , `category`
                        , `createtime`
                        , `description`)
                        VALUES
                        ('system'
                        , tag_name
                        , 'system'
                        , tag_category
                        , create_time
                        , description);
                        
                        SET state = 0;
                        
		ELSE 
        
						SET state = 1;
        
        END IF;
        
        SELECT state, emotibot.tbl_robot_tag.* FROM emotibot.tbl_robot_tag WHERE app_id = 'system' AND type = 'system' AND name = tag_name;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_tag
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_tag;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_tag`(IN appid VARCHAR(100),  IN tag_name VARCHAR(50) charset utf8
																,  IN tag_type VARCHAR(50) charset utf8,  IN tag_category VARCHAR(50) charset utf8
                                                                ,  IN create_time DATETIME,  IN description VARCHAR(500) charset utf8)
BEGIN

		DECLARE state INT;
        
        IF (tag_type = 'userdefine') THEN
        
				IF NOT EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name = tag_name) THEN
					
						INSERT INTO `emotibot`.`tbl_robot_tag`
								(`app_id`
								, `name`
								, `type`
								, `category`
								, `createtime`
								, `description`)
								VALUES
								(appid
								, tag_name
								, tag_type
								, tag_category
								, create_time
								, description);
								
								SET state = 0;
								
				ELSE 
				
								SET state = 1;
				
				END IF;
                
				SELECT state, emotibot.tbl_robot_tag.* FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name = tag_name;
         
        
        ELSE
        
				SET state = 3;
                
                SELECT state, NULL AS id, NULL AS app_id, NULL AS name, NULL AS type, NULL AS category, NULL AS createtime, NULL AS description;
         
            
        END IF;
        

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_tag_withtime
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_tag_withtime;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_tag_withtime`(IN appid VARCHAR(100),  IN tag_name VARCHAR(50)
																,  IN tag_type VARCHAR(50),  IN tag_category VARCHAR(50)
                                                                ,  IN description VARCHAR(500),  OUT state INT)
BEGIN

        
        IF NOT EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name = tag_name) THEN
			
				INSERT INTO `emotibot`.`tbl_robot_tag`
						(`app_id`
                        , `name`
                        , `type`
                        , `category`
                        , `description`)
                        VALUES
                        (appid
                        , tag_name
                        , tag_type
                        , tag_category
                        , now()
                        , description);
                        
                        SET state = 0;
                        
		ELSE 
        
						SET state = 1;
        
        END IF;
        
        SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name = tag_name;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_upload_corpus_history
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_upload_corpus_history;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_upload_corpus_history`(
arg_user_id varchar(45),
arg_app_id varchar(45),
arg_is_part bit(1),
arg_type  varchar(45),
arg_comments  varchar(4096)  CHARSET utf8  ,
arg_file_path  varchar(4096)  CHARSET utf8 ,
arg_rows int,
arg_valid_rows int
)
BEGIN

INSERT INTO `emotibot`.`tbl_upload_corpus_history`
( 
`user_id`,
`app_id`,
`is_part`,
`type`,
`comments`,
`file_path`,
`rows`,
`valid_rows`)
VALUES
(
arg_user_id,
arg_app_id,
arg_is_part,
arg_type,
arg_comments,
arg_file_path,
arg_rows,
arg_valid_rows);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_upload_ml_test_history
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_upload_ml_test_history;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_upload_ml_test_history`(
arg_user_id varchar(45),
arg_app_id varchar(45),
arg_is_part bit(1),
arg_comments  varchar(4096)  CHARSET utf8  ,
arg_file_path  varchar(4096)  CHARSET utf8 ,
arg_rows int
)
BEGIN

INSERT INTO `emotibot`.`tbl_upload_ml_test_history`
( 
`user_id`,
`app_id`,
`comments`,
`file_path`,
`rows`,
`is_part`)
VALUES
( 
arg_user_id,
arg_app_id,
arg_comments,
arg_file_path,
arg_rows,
arg_is_part
);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_save_upload_result_details
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_save_upload_result_details;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_save_upload_result_details`(IN `_upload_id` INT, IN `_action` VARCHAR(45), IN `_row_id` INT, IN `_code` VARCHAR(45), IN `_message` VARCHAR(2000) CHARSET utf8mb4)
BEGIN
INSERT INTO `emotibot`.`tbl_upload_result_details`
(`upload_id`,
`action`,
`row_id`,
`code`,
`message`)
VALUES
(_upload_id,
_action,
_row_id,
_code,
_message);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_search_tag_list
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_search_tag_list;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_search_tag_list`(IN appid VARCHAR(100),  IN keyword VARCHAR(100) charset utf8)
BEGIN
        
        SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system')) AND name LIKE CONCAT('%' , keyword , '%')  ORDER BY createtime desc;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_search_user_role
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_search_user_role;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_search_user_role`(_searchKey varchar(50))
BEGIN

if _searchKey is null then
	select * from ent_role;
else

	SELECT `ent_role`.`ID`,
    `ent_role`.`NAME`,
    `ent_role`.`DESCRIPTION`,
    `ent_role`.`ENABLED`
FROM `emotibot`.`ent_role`
where `id` like concat('%', _searchKey, '%')
OR `NAME` like concat('%', _searchKey, '%')
OR `DESCRIPTION` like concat('%', _searchKey, '%')
OR `ENABLED` like concat('%', _searchKey, '%');
end if;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_set_chat_log_ignore_status
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_set_chat_log_ignore_status;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_set_chat_log_ignore_status`(
	_QUESTION varchar(5000) charset utf8mb4,
    _ignore_status char(1)
 )
BEGIN

	UPDATE `emotibot`.`tbl_chat_log_past_2_days`
		SET `ignore_status` = _ignore_status
		WHERE QUESTION = _QUESTION;
        
	UPDATE `emotibot`.`tbl_chat_log_history_60_days`
		SET `ignore_status` = _ignore_status
		WHERE QUESTION = _QUESTION;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_set_chatlog_ignore_status
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_set_chatlog_ignore_status;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_set_chatlog_ignore_status`(
	_APPID VARCHAR(100),
	_QUESTION varchar(5000) charset utf8mb4,
    _ignore_status char(1)
 )
BEGIN

	UPDATE `emotibot`.`tbl_chat_log_past_2_days`
		SET `ignore_status` = _ignore_status
		WHERE _APPID = APPID AND QUESTION = _QUESTION;
        
	UPDATE `emotibot`.`tbl_chat_log_history_60_days`
		SET `ignore_status` = _ignore_status
		WHERE _APPID = APPID AND QUESTION = _QUESTION;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_set_proccessor
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_set_proccessor;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_set_proccessor`(_ns varchar(4000), _proccessor  varchar(4000))
BEGIN
	create  temporary table  if not exists `ent_lyframework_proccessor`
		 (  
		   `ns` varchar(50)  ,
		  `proccessor` varchar(4000),
		   PRIMARY KEY (`ns`)
		 ) ENGINE = MEMORY;  
         

	insert into ent_lyframework_proccessor values(_ns, _proccessor);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_set_stage
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_set_stage;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_set_stage`(
			arg_app_id varchar(50),
            arg_module varchar(50),
			arg_stage int
        )
BEGIN




 
 IF NOT EXISTS(SELECT * FROM tbl_robot_ssm_stage where app_id = arg_app_id and module = arg_module) then	
	 INSERT INTO  `tbl_robot_ssm_stage`
			(`app_id`,
            `module`,
			`stage`)
			VALUES
			(arg_app_id,
             arg_module,
			 arg_stage);
 END IF;
    
    UPDATE 
		tbl_robot_ssm_stage 
    SET 
		stage = arg_stage
        , stage_datetime  = now() 
	WHERE 
		app_id = arg_app_id
		AND module = arg_module 
		AND stage <= arg_stage ;
			  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_set_stage_status
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_set_stage_status;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_set_stage_status`(
			arg_app_id varchar(50),
            arg_module varchar(50),
			arg_stage int,
            arg_status varchar (256)
        )
BEGIN


 IF NOT EXISTS(
		SELECT  
		  `tbl_solution_stage_lastest_status`.`status_datetime`
		FROM `tbl_solution_stage_lastest_status`
		where `app_id` = arg_app_id and `module` = arg_module AND `stage` = arg_stage
	) then	

		INSERT INTO `tbl_solution_stage_lastest_status`
		(`app_id`,
		 `module`,
		 `stage`,
		 `status`,
		 `status_datetime`
		)
		VALUES
		(arg_app_id,
		arg_module,
		arg_stage,
		arg_status,
		now());

 END IF;
    
		UPDATE `tbl_solution_stage_lastest_status`
		SET
		
		
		
		`status` = arg_status,
		`status_datetime` = now()
		WHERE `app_id` = arg_app_id AND `module` = arg_module AND `stage` = arg_stage;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_switch_role_enabled
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_switch_role_enabled;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_switch_role_enabled`(_id int)
BEGIN
UPDATE
`emotibot`.`ent_role`
set enabled = not enabled
where `id` = _id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_update_config_version
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_update_config_version;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_update_config_version`(_userid varchar(50), _appid varchar(50))
BEGIN

if _userid is not null then
	update ent_config_version  set `version_value` = now()   where   user_id = _userid;
end if;

if _appid is not null then

	  set _userid = (select UserId from api_userkey where apikey = _appid);
      
      if _userid is not null then
	  replace `emotibot`.`ent_config_version`
		(`user_id`,
		`app_id`,
		`version_value`)
		VALUES
		(_userid,
		 _appid,
		now());
        end if;
end if;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_update_stage
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_update_stage;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_update_stage`(
			arg_app_id varchar(50),
            arg_module varchar(50),
			arg_stage int
        )
BEGIN




 
 IF NOT EXISTS(SELECT * FROM tbl_robot_ssm_stage where app_id = arg_app_id and module = arg_module) then	
	 INSERT INTO  `tbl_robot_ssm_stage`
			(`app_id`,
            `module`,
			`stage`)
			VALUES
			(arg_app_id,
             arg_module,
			 arg_stage);
 END IF;
    
    UPDATE 
		tbl_robot_ssm_stage 
    SET 
		stage = arg_stage
        , stage_datetime  = now() 
	WHERE 
		app_id = arg_app_id
		AND module = arg_module;
			  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_update_tag
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_update_tag;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_update_tag`(IN tag_id VARCHAR(100), IN appid VARCHAR(100),  IN tag_name VARCHAR(50) charset utf8
																,  IN tag_type VARCHAR(50) charset utf8,  IN tag_category VARCHAR(50) charset utf8
                                                                ,  IN create_time DATETIME,  IN description VARCHAR(500)  charset utf8)
BEGIN

		DECLARE state INT;
        
        IF NOT EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR  app_id = 'system' )  AND name = tag_name AND id != tag_id) THEN

				IF EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE app_id = appid AND id = tag_id) THEN
						
						IF EXISTS(SELECT * FROM emotibot.tbl_robot_tag WHERE (app_id = appid AND ( app_id != 'system' AND type != 'system')) AND id = tag_id) THEN
							
								UPDATE `emotibot`.`tbl_robot_tag`
								SET 
										`name` = tag_name,
										`type` = tag_type,
										`category` = tag_category,
										`createtime` = create_time,
										`description` = description
										WHERE  app_id = appid AND id = tag_id AND type = 'userdefine';
								
								SET state = 0;
								
						ELSE
								SET state = 2;
						
						END IF;
						
						
				ELSE
				
								SET state = 1;
						
				END IF;
        
        
        ELSE
				SET state = 3;
        
        END IF;
        
        
        SELECT state, emotibot.tbl_robot_tag.* FROM emotibot.tbl_robot_tag WHERE (app_id = appid  OR ( app_id = 'system' AND type = 'system'))  AND id = tag_id;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_user_select_robot
-- -----------------------------------------------------

DELIMITER $$
USE `emotibot`$$
DROP PROCEDURE IF EXISTS sp_user_select_robot;
CREATE DEFINER=`root`@`%` PROCEDURE `sp_user_select_robot`(
arg_user_id varchar(45),
arg_app_id varchar(45)
)
BEGIN

replace `emotibot`.`tbl_user_stare_robot`
(`user_id`,
`app_id`,
`stare_date_time`)
VALUES
(arg_user_id,
arg_app_id,
now());

END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `emotibot`.`view_activate_app`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_activate_app`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_activate_app` AS select `emotibot`.`api_userkey`.`UserId` AS `UserId`,`emotibot`.`api_userkey`.`Count` AS `Count`,`emotibot`.`api_userkey`.`Version` AS `Version`,`emotibot`.`api_userkey`.`CreatedTime` AS `CreatedTime`,`emotibot`.`api_userkey`.`PreductName` AS `PreductName`,`emotibot`.`api_userkey`.`ApiKey` AS `ApiKey`,`emotibot`.`api_userkey`.`Status` AS `Status`,`emotibot`.`api_userkey`.`MaxCount` AS `MaxCount`,`emotibot`.`api_userkey`.`AutoUserID` AS `AutoUserID`,`emotibot`.`api_userkey`.`NickName` AS `NickName`,`emotibot`.`api_userkey`.`CommonFunctionIds` AS `CommonFunctionIds`,`emotibot`.`api_userkey`.`AreaIds` AS `AreaIds`,`emotibot`.`api_userkey`.`Type` AS `Type`,`emotibot`.`api_userkey`.`MsgType` AS `MsgType`,`emotibot`.`api_userkey`.`Msg` AS `Msg`,`emotibot`.`api_userkey`.`MsgJson` AS `MsgJson`,`emotibot`.`api_userkey`.`template_api_key` AS `template_api_key`,`emotibot`.`api_userkey`.`industry_id` AS `industry_id`,`emotibot`.`api_userkey`.`order_no` AS `order_no`,`view_activate_appid`.`appid` AS `appid` from (`emotibot`.`api_userkey` join `emotibot`.`view_activate_appid` on((convert(`emotibot`.`api_userkey`.`ApiKey` using utf8mb4) = `view_activate_appid`.`appid`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_activate_appid`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_activate_appid`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_activate_appid` AS select distinct `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid` from `emotibot`.`tbl_chat_log_past_2_days` union select distinct `emotibot`.`tbl_chat_log_history_60_days`.`APPID` AS `appid` from `emotibot`.`tbl_chat_log_history_60_days` union select `emotibot`.`api_userkey`.`ApiKey` AS `appid` from `emotibot`.`api_userkey` where (timestampdiff(DAY,`emotibot`.`api_userkey`.`CreatedTime`,now()) <= 60);

-- -----------------------------------------------------
-- View `emotibot`.`view_ai_algorithm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ai_algorithm`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ai_algorithm` AS select `emotibot`.`ent_ai_algorithm`.`id` AS `id`,`emotibot`.`ent_ai_algorithm`.`name` AS `name`,`emotibot`.`ent_ai_algorithm`.`kind` AS `kind`,`emotibot`.`ent_ai_algorithm_kind`.`name` AS `kind_name`,`emotibot`.`ent_ai_algorithm`.`enabled` AS `enabled`,`emotibot`.`ent_ai_algorithm`.`description` AS `description`,`emotibot`.`ent_ai_algorithm`.`provider` AS `provider`,`emotibot`.`ent_ai_algorithm`.`default_config` AS `default_config`,`emotibot`.`ent_ai_algorithm`.`predict_url` AS `predict_url`,`emotibot`.`ent_ai_algorithm`.`train_url` AS `train_url`,`emotibot`.`ent_ai_algorithm`.`test_url` AS `test_url`,`emotibot`.`ent_ai_algorithm`.`remove_url` AS `remove_url`,`emotibot`.`ent_ai_algorithm`.`create_datetime` AS `create_datetime` from (`emotibot`.`ent_ai_algorithm` join `emotibot`.`ent_ai_algorithm_kind` on((`emotibot`.`ent_ai_algorithm`.`kind` = `emotibot`.`ent_ai_algorithm_kind`.`id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_appid_tree`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_appid_tree`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_appid_tree` AS select `me`.`app_id` AS `app_id`,`me`.`group_name` AS `group_name`,`me`.`comment` AS `comment`,`child`.`app_id` AS `child_app_id`,`child`.`group_name` AS `child_group_name`,`child`.`comment` AS `child_comment`,`func_app_id_has_child`(`child`.`app_id`) AS `child_has_child` from (`emotibot`.`tbl_appid_tree` `child` join `emotibot`.`tbl_appid_tree` `me` on((`me`.`app_id` = `child`.`parent_app_id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_last_hour`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_last_hour`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_last_hour` AS select `A`.`appid` AS `APPID`,`A`.`DATE` AS `DATE`,`A`.`HOUR` AS `HOUR`,ifnull(`B`.`COUNT`,0) AS `SQ_CHAT_COUNT`,`A`.`COUNT` AS `NON_SQ_CHAT_COUNT`,((ifnull(`A`.`EXEC_TIME`,0) + ifnull(`B`.`EXEC_TIME`,0)) / (`A`.`COUNT` + ifnull(`B`.`COUNT`,0))) AS `EXEC_TIME` from (`emotibot`.`view_chat_log_collect_last_hour_by_non_solutions` `A` left join `emotibot`.`view_chat_log_collect_last_hour_by_solutions` `B` on(((`A`.`appid` = `B`.`appid`) and (`A`.`DATE` = `B`.`DATE`) and (`A`.`HOUR` = `B`.`HOUR`)))) union select `A`.`appid` AS `APPID`,`A`.`DATE` AS `DATE`,`A`.`HOUR` AS `HOUR`,`A`.`COUNT` AS `SQ_CHAT_COUNT`,ifnull(`B`.`COUNT`,0) AS `NON_SQ_CHAT_COUNT`,((ifnull(`A`.`EXEC_TIME`,0) + ifnull(`B`.`EXEC_TIME`,0)) / (`A`.`COUNT` + ifnull(`B`.`COUNT`,0))) AS `EXEC_TIME` from (`emotibot`.`view_chat_log_collect_last_hour_by_solutions` `A` left join `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions` `B` on(((`A`.`appid` = `B`.`appid`) and (`A`.`DATE` = `B`.`DATE`) and (`A`.`HOUR` = `B`.`HOUR`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_last_hour_by_non_solutions` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,sum(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where ((`emotibot`.`tbl_chat_log_past_2_days`.`SOURCE` not in ('faq','knowledge','task_engine')) and (`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` between `FUNC_GET_LAST_HOUR`() and `FUNC_GET_CURR_HOUR`())) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_last_hour_by_nonsq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_nonsq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_last_hour_by_nonsq` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,avg(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where (isnull(`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ`) and (`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` between `FUNC_GET_LAST_HOUR`() and `FUNC_GET_CURR_HOUR`())) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_last_hour_by_solutions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_solutions`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_last_hour_by_solutions` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,sum(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where ((`emotibot`.`tbl_chat_log_past_2_days`.`SOURCE` in ('faq','knowledge','task_engine')) and (`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` between `FUNC_GET_LAST_HOUR`() and `FUNC_GET_CURR_HOUR`())) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_last_hour_by_sq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_last_hour_by_sq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_last_hour_by_sq` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,avg(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where ((`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ` is not null) and (`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` between `FUNC_GET_LAST_HOUR`() and `FUNC_GET_CURR_HOUR`())) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_recent_all`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_recent_all`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_recent_all` AS select `A`.`appid` AS `APPID`,`A`.`DATE` AS `DATE`,`A`.`HOUR` AS `HOUR`,ifnull(`B`.`COUNT`,0) AS `SQ_CHAT_COUNT`,`A`.`COUNT` AS `NON_SQ_CHAT_COUNT`,((`A`.`EXEC_TIME` + ifnull(`B`.`EXEC_TIME`,0)) / 2) AS `EXEC_TIME` from (`emotibot`.`view_chat_log_collect_recent_all_by_nonsq` `A` left join `emotibot`.`view_chat_log_collect_recent_all_by_sq` `B` on(((`A`.`appid` = `B`.`appid`) and (`A`.`DATE` = `B`.`DATE`) and (`A`.`HOUR` = `B`.`HOUR`)))) union select `A`.`appid` AS `APPID`,`A`.`DATE` AS `DATE`,`A`.`HOUR` AS `HOUR`,`A`.`COUNT` AS `SQ_CHAT_COUNT`,ifnull(`B`.`COUNT`,0) AS `NON_SQ_CHAT_COUNT`,((`A`.`EXEC_TIME` + ifnull(`B`.`EXEC_TIME`,0)) / 2) AS `EXEC_TIME` from (`emotibot`.`view_chat_log_collect_recent_all_by_sq` `A` left join `emotibot`.`view_chat_log_collect_recent_all_by_nonsq` `B` on(((`A`.`appid` = `B`.`appid`) and (`A`.`DATE` = `B`.`DATE`) and (`A`.`HOUR` = `B`.`HOUR`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_recent_all_by_nonsq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_recent_all_by_nonsq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_recent_all_by_nonsq` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,avg(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where isnull(`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ`) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_collect_recent_all_by_sq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_collect_recent_all_by_sq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_collect_recent_all_by_sq` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,avg(`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME`) AS `EXEC_TIME`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`ID`) AS `COUNT` from `emotibot`.`tbl_chat_log_past_2_days` where (`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ` is not null) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR` order by `DATE`,`HOUR` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_history` AS select `emotibot`.`tbl_chat_log_past_2_days`.`ID` AS `ID`,`emotibot`.`tbl_chat_log_past_2_days`.`USER_ID` AS `USER_ID`,`emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `APPID`,`emotibot`.`tbl_chat_log_past_2_days`.`QUESTION` AS `QUESTION`,`emotibot`.`tbl_chat_log_past_2_days`.`ANSWER` AS `ANSWER`,`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ` AS `MATCHED_SQ`,`emotibot`.`tbl_chat_log_past_2_days`.`RAW_STRING` AS `RAW_STRING`,`emotibot`.`tbl_chat_log_past_2_days`.`SOURCE` AS `SOURCE`,`emotibot`.`tbl_chat_log_past_2_days`.`EXEC_TIME` AS `EXEC_TIME`,`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` AS `CREATE_DATETIME`,`emotibot`.`tbl_chat_log_past_2_days`.`score` AS `score`,`emotibot`.`tbl_chat_log_past_2_days`.`match_module` AS `match_module`,`emotibot`.`tbl_chat_log_past_2_days`.`uniqueId` AS `uniqueId`,`emotibot`.`tbl_chat_log_past_2_days`.`status` AS `status`,`emotibot`.`tbl_chat_log_past_2_days`.`ignore_status` AS `ignore_status`,`emotibot`.`tbl_chat_log_past_2_days`.`badcase_flag` AS `badcase_flag` from `emotibot`.`tbl_chat_log_past_2_days` union select `emotibot`.`tbl_chat_log_history_60_days`.`ID` AS `ID`,`emotibot`.`tbl_chat_log_history_60_days`.`USER_ID` AS `USER_ID`,`emotibot`.`tbl_chat_log_history_60_days`.`APPID` AS `APPID`,`emotibot`.`tbl_chat_log_history_60_days`.`QUESTION` AS `QUESTION`,`emotibot`.`tbl_chat_log_history_60_days`.`ANSWER` AS `ANSWER`,`emotibot`.`tbl_chat_log_history_60_days`.`MATCHED_SQ` AS `MATCHED_SQ`,`emotibot`.`tbl_chat_log_history_60_days`.`RAW_STRING` AS `RAW_STRING`,`emotibot`.`tbl_chat_log_history_60_days`.`SOURCE` AS `SOURCE`,`emotibot`.`tbl_chat_log_history_60_days`.`EXEC_TIME` AS `EXEC_TIME`,`emotibot`.`tbl_chat_log_history_60_days`.`CREATE_DATETIME` AS `CREATE_DATETIME`,`emotibot`.`tbl_chat_log_history_60_days`.`score` AS `score`,`emotibot`.`tbl_chat_log_history_60_days`.`match_module` AS `match_module`,`emotibot`.`tbl_chat_log_history_60_days`.`uniqueId` AS `uniqueId`,`emotibot`.`tbl_chat_log_history_60_days`.`status` AS `status`,`emotibot`.`tbl_chat_log_history_60_days`.`ignore_status` AS `ignore_status`,`emotibot`.`tbl_chat_log_history_60_days`.`badcase_flag` AS `badcase_flag` from `emotibot`.`tbl_chat_log_history_60_days`;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_maunal_clustering_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_maunal_clustering_group`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_maunal_clustering_group` AS select `emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`report_id` AS `report_id`,`emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`group_id` AS `group_id`,`emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`tag` AS `tag`,count(`emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`log_id`) AS `num` from (`emotibot`.`tbl_chat_log_manual_clustering_tag_group` join `emotibot`.`tbl_chat_log_manual_clustering_group_log_map` on((`emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`id` = `emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`group_id`))) group by `emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`report_id`,`emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`group_id`,`emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`tag`;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_maunal_clustering_group_content`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_maunal_clustering_group_content`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_maunal_clustering_group_content` AS select `emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`log_id` AS `id`,`view_chat_log_history`.`QUESTION` AS `question`,`view_chat_log_history`.`ignore_status` AS `ignore_status`,`view_chat_log_history`.`status` AS `status`,`emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`report_id` AS `report_id`,`emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`group_id` AS `group_id` from ((`emotibot`.`tbl_chat_log_manual_clustering_tag_group` left join `emotibot`.`tbl_chat_log_manual_clustering_group_log_map` on((`emotibot`.`tbl_chat_log_manual_clustering_tag_group`.`id` = `emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`group_id`))) left join `emotibot`.`view_chat_log_history` on((`emotibot`.`tbl_chat_log_manual_clustering_group_log_map`.`log_id` = `view_chat_log_history`.`ID`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_sq_hot_recent_all`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_sq_hot_recent_all`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_sq_hot_recent_all` AS select `emotibot`.`tbl_chat_log_past_2_days`.`APPID` AS `appid`,`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ` AS `MATCHED_SQ`,cast(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME` as date) AS `DATE`,hour(`emotibot`.`tbl_chat_log_past_2_days`.`CREATE_DATETIME`) AS `HOUR`,count(`emotibot`.`tbl_chat_log_past_2_days`.`QUESTION`) AS `count` from `emotibot`.`tbl_chat_log_past_2_days` where (`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ` is not null) group by `emotibot`.`tbl_chat_log_past_2_days`.`APPID`,`DATE`,`HOUR`,`emotibot`.`tbl_chat_log_past_2_days`.`MATCHED_SQ`;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_statistic_chat_count_per_hour`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_statistic_chat_count_per_hour`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_statistic_chat_count_per_hour` AS select `APP`.`appid` AS `APPID`,`APP`.`DATE` AS `DATE`,`APP`.`HOUR` AS `HOUR`,ifnull(`LOG`.`SQ_CHAT_COUNT`,0) AS `SQ_CHAT_COUNT`,ifnull(`LOG`.`NON_SQ_CHAT_COUNT`,0) AS `NON_SQ_CHAT_COUNT`,(ifnull(`LOG`.`SQ_CHAT_COUNT`,0) + ifnull(`LOG`.`NON_SQ_CHAT_COUNT`,0)) AS `CHAT_COUNT`,ifnull(`LOG`.`EXEC_TIME`,0) AS `EXEC_TIME`,ifnull(`LOG`.`CREATE_DATETIME`,(`APP`.`DATE` + interval (`APP`.`HOUR` + 1) hour)) AS `CREATE_DATETIME` from (((select `view_activate_app`.`ApiKey` AS `appid`,`H`.`DATE` AS `DATE`,`H`.`HOUR` AS `HOUR` from (`emotibot`.`view_activate_app` join `emotibot`.`ent_chat_log_active_date_hour` `H`))) `APP` left join `emotibot`.`tbl_chat_log_statistic_chat_count_60_days` `LOG` on(((`APP`.`appid` = convert(`LOG`.`APPID` using utf8)) and (`APP`.`DATE` = `LOG`.`DATE`) and (`APP`.`HOUR` = `LOG`.`HOUR`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_statistic_sq_hot_2past_day`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_2past_day`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_statistic_sq_hot_2past_day` AS select `view_chat_log_statistic_sq_hot_per_day`.`APPID` AS `APPID`,`view_chat_log_statistic_sq_hot_per_day`.`DATE` AS `DATE`,`view_chat_log_statistic_sq_hot_per_day`.`MATCHED_SQ` AS `MATCHED_SQ`,`view_chat_log_statistic_sq_hot_per_day`.`COUNT` AS `COUNT` from `emotibot`.`view_chat_log_statistic_sq_hot_per_day` where (`view_chat_log_statistic_sq_hot_per_day`.`DATE` = cast((now() + interval -(2) day) as date));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_statistic_sq_hot_per_day`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_per_day`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_statistic_sq_hot_per_day` AS select `emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`APPID` AS `APPID`,`emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`DATE` AS `DATE`,`emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`MATCHED_SQ` AS `MATCHED_SQ`,sum(`emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`COUNT`) AS `COUNT` from `emotibot`.`tbl_chat_log_statistic_sq_count_60_days` group by `emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`APPID`,`emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`DATE`,`emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`MATCHED_SQ` order by `emotibot`.`tbl_chat_log_statistic_sq_count_60_days`.`DATE` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_statistic_sq_hot_yesterday`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_statistic_sq_hot_yesterday`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_statistic_sq_hot_yesterday` AS select `view_chat_log_statistic_sq_hot_per_day`.`APPID` AS `APPID`,`view_chat_log_statistic_sq_hot_per_day`.`DATE` AS `DATE`,`view_chat_log_statistic_sq_hot_per_day`.`MATCHED_SQ` AS `MATCHED_SQ`,`view_chat_log_statistic_sq_hot_per_day`.`COUNT` AS `COUNT` from `emotibot`.`view_chat_log_statistic_sq_hot_per_day` where (`view_chat_log_statistic_sq_hot_per_day`.`DATE` = cast((now() + interval -(1) day) as date));

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_log_statistic_sq_trend`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_log_statistic_sq_trend`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_log_statistic_sq_trend` AS select `_2`.`APPID` AS `APPID`,`_2`.`MATCHED_SQ` AS `MATCHED_SQ`,`_2`.`COUNT` AS `_2COUNT`,ifnull(`_1`.`COUNT`,0) AS `_1COUNT`,(ifnull(`_1`.`COUNT`,0) - `_2`.`COUNT`) AS `INC`,format(((ifnull(`_1`.`COUNT`,0) - `_2`.`COUNT`) / `_2`.`COUNT`),4) AS `INC_RATE` from (`emotibot`.`view_chat_log_statistic_sq_hot_2past_day` `_2` left join `emotibot`.`view_chat_log_statistic_sq_hot_yesterday` `_1` on(((`_2`.`APPID` = `_1`.`APPID`) and (`_2`.`MATCHED_SQ` = `_1`.`MATCHED_SQ`)))) order by ((ifnull(`_1`.`COUNT`,0) - `_2`.`COUNT`) / `_2`.`COUNT`) desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_optimization_report`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_optimization_report`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_optimization_report` AS select `emotibot`.`tbl_chat_optimization_report`.`id` AS `report_id`,`emotibot`.`tbl_chat_optimization_report`.`appid` AS `appid`,`emotibot`.`tbl_chat_optimization_report`.`date_from` AS `date_from`,`emotibot`.`tbl_chat_optimization_report`.`date_to` AS `date_to`,count(`emotibot`.`tbl_chat_optimization_report_tag_group_content`.`content`) AS `unidentified_chat_count` from ((`emotibot`.`tbl_chat_optimization_report` join `emotibot`.`tbl_chat_optimization_report_tag_group` on((`emotibot`.`tbl_chat_optimization_report`.`id` = `emotibot`.`tbl_chat_optimization_report_tag_group`.`report_id`))) join `emotibot`.`tbl_chat_optimization_report_tag_group_content` on((`emotibot`.`tbl_chat_optimization_report_tag_group_content`.`group_id` = `emotibot`.`tbl_chat_optimization_report_tag_group`.`id`))) group by `emotibot`.`tbl_chat_optimization_report`.`id`,`emotibot`.`tbl_chat_optimization_report`.`appid`,`emotibot`.`tbl_chat_optimization_report`.`date_from`,`emotibot`.`tbl_chat_optimization_report`.`date_to` order by `emotibot`.`tbl_chat_optimization_report`.`date_to` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_chat_optimization_report_tag_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_chat_optimization_report_tag_group`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_chat_optimization_report_tag_group` AS select `emotibot`.`tbl_chat_optimization_report_tag_group`.`report_id` AS `report_id`,`emotibot`.`tbl_chat_optimization_report_tag_group`.`id` AS `group_id`,`emotibot`.`tbl_chat_optimization_report_tag_group`.`tag` AS `tag`,count(`emotibot`.`tbl_chat_optimization_report_tag_group_content`.`content`) AS `unidentified_chat_count` from (`emotibot`.`tbl_chat_optimization_report_tag_group` join `emotibot`.`tbl_chat_optimization_report_tag_group_content` on((`emotibot`.`tbl_chat_optimization_report_tag_group_content`.`group_id` = `emotibot`.`tbl_chat_optimization_report_tag_group`.`id`))) group by `emotibot`.`tbl_chat_optimization_report_tag_group`.`report_id`,`emotibot`.`tbl_chat_optimization_report_tag_group`.`id`,`emotibot`.`tbl_chat_optimization_report_tag_group`.`tag`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_case_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_case_count`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_case_count` AS select `emotibot`.`ent_ml_test_case`.`app_id` AS `app_id`,`emotibot`.`ent_ml_test_case`.`label_sq` AS `label_sq`,`emotibot`.`ent_ml_test_case`.`space` AS `space`,count(`emotibot`.`ent_ml_test_case`.`id`) AS `test_case_count` from `emotibot`.`ent_ml_test_case` group by `emotibot`.`ent_ml_test_case`.`app_id`,`emotibot`.`ent_ml_test_case`.`label_sq`,`emotibot`.`ent_ml_test_case`.`space`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_correct_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_correct_count`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_correct_count` AS select `view_ml_test_correct_rate_details`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_correct_rate_details`.`app_id` AS `app_id`,sum(`view_ml_test_correct_rate_details`.`correct_count`) AS `correct_count`,sum(`view_ml_test_correct_rate_details`.`test_count`) AS `test_count` from `emotibot`.`view_ml_test_correct_rate_details` group by `view_ml_test_correct_rate_details`.`ml_test_history_id`,`view_ml_test_correct_rate_details`.`app_id`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_correct_rate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_correct_rate`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_correct_rate` AS select `view_ml_test_correct_count`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_correct_count`.`correct_count` AS `correct_count`,`view_ml_test_correct_count`.`app_id` AS `app_id`,`view_ml_test_correct_count`.`test_count` AS `test_count`,(`view_ml_test_correct_count`.`correct_count` / `view_ml_test_correct_count`.`test_count`) AS `correct_rate`,concat(format(((100 * `view_ml_test_correct_count`.`correct_count`) / `view_ml_test_correct_count`.`test_count`),2),'%') AS `correct_rate_text` from `emotibot`.`view_ml_test_correct_count`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_correct_rate_details`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_correct_rate_details`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_correct_rate_details` AS select `view_ml_test_case_count`.`app_id` AS `app_id`,`view_ml_test_case_count`.`label_sq` AS `label_sq`,`view_ml_test_case_count`.`test_case_count` AS `test_case_count`,`view_ml_test_case_count`.`space` AS `space`,`view_ml_test_result_count_by_sq`.`ml_test_history_id` AS `ml_test_history_id`,ifnull(`view_ml_test_result_count_by_sq`.`test_count`,0) AS `test_count`,ifnull(`view_ml_test_result_correct_count_by_sq`.`correct_count`,0) AS `correct_count`,(ifnull(`view_ml_test_result_correct_count_by_sq`.`correct_count`,0) / `view_ml_test_result_count_by_sq`.`test_count`) AS `correct_rate`,concat(format(((100 * ifnull(`view_ml_test_result_correct_count_by_sq`.`correct_count`,0)) / `view_ml_test_result_count_by_sq`.`test_count`),2),'%') AS `correct_rate_text` from ((`emotibot`.`view_ml_test_case_count` left join `emotibot`.`view_ml_test_result_count_by_sq` on(((`view_ml_test_case_count`.`app_id` = `view_ml_test_result_count_by_sq`.`app_id`) and (`view_ml_test_case_count`.`space` = `view_ml_test_result_count_by_sq`.`space`) and (`view_ml_test_case_count`.`label_sq` = `view_ml_test_result_count_by_sq`.`label_sq`)))) left join `emotibot`.`view_ml_test_result_correct_count_by_sq` on(((`view_ml_test_result_count_by_sq`.`app_id` = `view_ml_test_result_correct_count_by_sq`.`app_id`) and (`view_ml_test_result_count_by_sq`.`space` = `view_ml_test_result_correct_count_by_sq`.`space`) and (`view_ml_test_result_count_by_sq`.`label_sq` = `view_ml_test_result_correct_count_by_sq`.`label_sq`) and (`view_ml_test_result_count_by_sq`.`ml_test_history_id` = `view_ml_test_result_correct_count_by_sq`.`ml_test_history_id`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_history` AS select `emotibot`.`tbl_ml_test_history`.`id` AS `id`,`emotibot`.`tbl_ml_test_history`.`app_id` AS `app_id`,`emotibot`.`tbl_ml_test_history`.`date_time` AS `date_time`,ifnull(`view_ml_test_correct_rate`.`correct_count`,0) AS `correct_count`,ifnull(`view_ml_test_correct_rate`.`test_count`,0) AS `test_count`,ifnull(`view_ml_test_correct_rate`.`correct_rate`,0) AS `correct_rate`,ifnull(`view_ml_test_correct_rate`.`correct_rate_text`,0) AS `correct_rate_text`,`emotibot`.`tbl_ml_test_history`.`status` AS `status`,`emotibot`.`tbl_ml_test_history`.`train_result_id` AS `train_result_id` from (`emotibot`.`tbl_ml_test_history` left join `emotibot`.`view_ml_test_correct_rate` on((`emotibot`.`tbl_ml_test_history`.`id` = `view_ml_test_correct_rate`.`ml_test_history_id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_history_with_train_model`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_history_with_train_model`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_history_with_train_model` AS select `emotibot`.`tbl_ml_test_history_archive`.`id` AS `id`,`emotibot`.`tbl_ml_test_history_archive`.`app_id` AS `app_id`,`emotibot`.`tbl_ml_test_history_archive`.`date_time` AS `date_time`,`emotibot`.`tbl_ml_test_history_archive`.`correct_count` AS `correct_count`,`emotibot`.`tbl_ml_test_history_archive`.`test_count` AS `test_count`,`emotibot`.`tbl_ml_test_history_archive`.`correct_rate` AS `correct_rate`,`emotibot`.`tbl_ml_test_history_archive`.`correct_rate_text` AS `correct_rate_text`,`emotibot`.`tbl_ml_test_history_archive`.`status` AS `status`,`emotibot`.`tbl_ml_test_history_archive`.`train_result_id` AS `train_result_id`,`view_ml_train_history`.`algo_kind_name` AS `algo_kind_name`,`view_ml_train_history`.`algo_name` AS `algo_name`,`view_ml_train_history`.`algo_solution_name` AS `algo_solution_name`,`view_ml_train_history`.`algo_id` AS `algo_id`,`view_ml_train_history`.`algo_kind_id` AS `algo_kind_id`,`view_ml_train_history`.`algo_solution_id` AS `algo_solution_id`,`view_ml_train_history`.`model_id` AS `model_id` from (`emotibot`.`tbl_ml_test_history_archive` join `emotibot`.`view_ml_train_history` on((`view_ml_train_history`.`id` = `emotibot`.`tbl_ml_test_history_archive`.`train_result_id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_lastest`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_lastest`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_lastest` AS select `emotibot`.`tbl_ml_test_history`.`id` AS `id`,`emotibot`.`tbl_ml_test_history`.`app_id` AS `app_id`,`emotibot`.`tbl_ml_test_history`.`date_time` AS `date_time`,`emotibot`.`tbl_ml_test_history`.`status` AS `status` from (`emotibot`.`tbl_ml_test_history` join `emotibot`.`view_ml_test_lastest_datetime` `lastest` on(((`lastest`.`app_id` = `emotibot`.`tbl_ml_test_history`.`app_id`) and (`lastest`.`date_time` = `emotibot`.`tbl_ml_test_history`.`date_time`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_lastest_correct_rate_details`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_lastest_correct_rate_details`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_lastest_correct_rate_details` AS select `view_ml_test_case_count`.`app_id` AS `app_id`,`view_ml_test_case_count`.`label_sq` AS `label_sq`,`view_ml_test_case_count`.`test_case_count` AS `test_case_count`,NULL AS `ml_test_history_id`,NULL AS `test_count`,NULL AS `correct_count`,NULL AS `correct_rate`,NULL AS `correct_rate_text` from `emotibot`.`view_ml_test_case_count` where (not(`view_ml_test_case_count`.`app_id` in (select `emotibot`.`tbl_ml_test_history`.`app_id` from `emotibot`.`tbl_ml_test_history`))) union select `view_ml_test_correct_rate_details`.`app_id` AS `app_id`,`view_ml_test_correct_rate_details`.`label_sq` AS `label_sq`,ifnull(`view_ml_test_correct_rate_details`.`test_case_count`,0) AS `test_case_count`,`view_ml_test_correct_rate_details`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_correct_rate_details`.`test_count` AS `test_count`,`view_ml_test_correct_rate_details`.`correct_count` AS `correct_count`,`view_ml_test_correct_rate_details`.`correct_rate` AS `correct_rate`,`view_ml_test_correct_rate_details`.`correct_rate_text` AS `correct_rate_text` from (`emotibot`.`view_ml_test_correct_rate_details` join `emotibot`.`view_ml_test_lastest` on((`view_ml_test_lastest`.`id` = `view_ml_test_correct_rate_details`.`ml_test_history_id`))) union select `view_ml_test_correct_rate_details`.`app_id` AS `app_id`,`view_ml_test_correct_rate_details`.`label_sq` AS `label_sq`,ifnull(`view_ml_test_correct_rate_details`.`test_case_count`,0) AS `test_case_count`,`view_ml_test_correct_rate_details`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_correct_rate_details`.`test_count` AS `test_count`,`view_ml_test_correct_rate_details`.`correct_count` AS `correct_count`,`view_ml_test_correct_rate_details`.`correct_rate` AS `correct_rate`,`view_ml_test_correct_rate_details`.`correct_rate_text` AS `correct_rate_text` from `emotibot`.`view_ml_test_correct_rate_details` where isnull(`view_ml_test_correct_rate_details`.`ml_test_history_id`);

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_lastest_datetime`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_lastest_datetime`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_lastest_datetime` AS select `max_ori`.`app_id` AS `app_id`,max(`max_ori`.`date_time`) AS `date_time` from `emotibot`.`tbl_ml_test_history` `max_ori` group by `max_ori`.`app_id`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_lastest_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_lastest_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_lastest_history` AS select `view_ml_test_history`.`id` AS `id`,`view_ml_test_history`.`app_id` AS `app_id`,`view_ml_test_history`.`date_time` AS `date_time`,`view_ml_test_history`.`correct_count` AS `correct_count`,`view_ml_test_history`.`test_count` AS `test_count`,`view_ml_test_history`.`correct_rate` AS `correct_rate`,`view_ml_test_history`.`correct_rate_text` AS `correct_rate_text`,`view_ml_test_history`.`status` AS `status` from (`emotibot`.`view_ml_test_history` join `emotibot`.`view_ml_test_lastest_datetime` `lastest` on(((`lastest`.`app_id` = `view_ml_test_history`.`app_id`) and (`lastest`.`date_time` = `view_ml_test_history`.`date_time`))));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_lastest_result`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_lastest_result`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_lastest_result` AS select `emotibot`.`ent_ml_test_case`.`id` AS `test_case_id`,`emotibot`.`ent_ml_test_case`.`app_id` AS `app_id`,NULL AS `ml_test_history_id`,`emotibot`.`ent_ml_test_case`.`question` AS `question`,`emotibot`.`ent_ml_test_case`.`label_sq` AS `label_sq`,NULL AS `matched_sq`,NULL AS `right` from `emotibot`.`ent_ml_test_case` where (not(`emotibot`.`ent_ml_test_case`.`id` in (select `emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_case_id` from `emotibot`.`tbl_ml_test_result_no_case_text`))) union select `view_ml_test_result`.`test_case_id` AS `test_case_id`,`view_ml_test_result`.`app_id` AS `app_id`,`view_ml_test_result`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_result`.`question` AS `question`,`view_ml_test_result`.`label_sq` AS `label_sq`,`view_ml_test_result`.`matched_sq` AS `matched_sq`,`view_ml_test_result`.`right` AS `right` from (`emotibot`.`view_ml_test_result` join `emotibot`.`view_ml_test_lastest_history` on((`view_ml_test_result`.`ml_test_history_id` = `view_ml_test_lastest_history`.`id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_result`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_result`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_result` AS select `emotibot`.`ent_ml_test_case`.`id` AS `test_case_id`,`emotibot`.`ent_ml_test_case`.`app_id` AS `app_id`,`emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_history_id` AS `ml_test_history_id`,`emotibot`.`ent_ml_test_case`.`question` AS `question`,`emotibot`.`ent_ml_test_case`.`label_sq` AS `label_sq`,(case `emotibot`.`tbl_ml_test_result_no_case_text`.`matched_sq` when -(1) then '不能找到正确应答' else `emotibot`.`tbl_ml_test_result_no_case_text`.`matched_sq` end) AS `matched_sq`,(case `emotibot`.`tbl_ml_test_result_no_case_text`.`matched_sq` when `emotibot`.`ent_ml_test_case`.`label_sq` then 1 else 0 end) AS `right`,`emotibot`.`tbl_ml_test_result_no_case_text`.`score` AS `score`,`emotibot`.`tbl_ml_test_result_no_case_text`.`source` AS `source`,`emotibot`.`ent_ml_test_case`.`space` AS `space` from (`emotibot`.`ent_ml_test_case` join `emotibot`.`tbl_ml_test_result_no_case_text` on((`emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_case_id` = `emotibot`.`ent_ml_test_case`.`id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_result_correct_count_by_sq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_result_correct_count_by_sq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_result_correct_count_by_sq` AS select `view_ml_test_result`.`app_id` AS `app_id`,`view_ml_test_result`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_result`.`label_sq` AS `label_sq`,`view_ml_test_result`.`space` AS `space`,count(`view_ml_test_result`.`test_case_id`) AS `correct_count` from `emotibot`.`view_ml_test_result` where (`view_ml_test_result`.`right` = 1) group by `view_ml_test_result`.`app_id`,`view_ml_test_result`.`ml_test_history_id`,`view_ml_test_result`.`label_sq`,`view_ml_test_result`.`space`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_result_count`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_result_count`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_result_count` AS select `emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_history_id` AS `ml_test_history_id`,count(`emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_case_id`) AS `test_count` from `emotibot`.`tbl_ml_test_result_no_case_text` group by `emotibot`.`tbl_ml_test_result_no_case_text`.`ml_test_history_id`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_test_result_count_by_sq`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_test_result_count_by_sq`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_test_result_count_by_sq` AS select `view_ml_test_result`.`app_id` AS `app_id`,`view_ml_test_result`.`ml_test_history_id` AS `ml_test_history_id`,`view_ml_test_result`.`label_sq` AS `label_sq`,`view_ml_test_result`.`space` AS `space`,(case when isnull(`view_ml_test_result`.`ml_test_history_id`) then NULL else count(`view_ml_test_result`.`test_case_id`) end) AS `test_count` from `emotibot`.`view_ml_test_result` group by `view_ml_test_result`.`app_id`,`view_ml_test_result`.`ml_test_history_id`,`view_ml_test_result`.`label_sq`,`view_ml_test_result`.`space`;

-- -----------------------------------------------------
-- View `emotibot`.`view_ml_train_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_ml_train_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_ml_train_history` AS select `emotibot`.`tbl_ml_train_history`.`id` AS `id`,`emotibot`.`tbl_ml_train_history`.`app_id` AS `app_id`,`emotibot`.`ent_ai_algorithm_kind`.`id` AS `algo_kind_id`,`emotibot`.`ent_ai_algorithm_kind`.`name` AS `algo_kind_name`,`emotibot`.`ent_ai_algorithm`.`name` AS `algo_name`,`emotibot`.`tbl_ai_solution`.`name` AS `algo_solution_name`,`emotibot`.`tbl_ml_train_history`.`status` AS `status`,`emotibot`.`tbl_ml_train_history`.`model_id` AS `model_id`,`emotibot`.`tbl_ml_train_history`.`result` AS `result`,`emotibot`.`tbl_ml_train_history`.`create_datetime` AS `create_datetime`,`emotibot`.`tbl_ml_train_history`.`update_datetime` AS `update_datetime`,`emotibot`.`tbl_ml_train_history`.`algo_id` AS `algo_id`,`emotibot`.`tbl_ml_train_history`.`algo_solution_id` AS `algo_solution_id`,`emotibot`.`tbl_ml_train_history`.`train_url` AS `train_url`,`emotibot`.`tbl_ml_train_history`.`config` AS `config` from (((`emotibot`.`tbl_ml_train_history` join `emotibot`.`ent_ai_algorithm_kind` on((`emotibot`.`ent_ai_algorithm_kind`.`id` = `emotibot`.`tbl_ml_train_history`.`algo_kind_id`))) join `emotibot`.`ent_ai_algorithm` on((`emotibot`.`ent_ai_algorithm`.`id` = `emotibot`.`tbl_ml_train_history`.`algo_id`))) left join `emotibot`.`tbl_ai_solution` on((`emotibot`.`tbl_ai_solution`.`id` = `emotibot`.`tbl_ml_train_history`.`algo_solution_id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_request_exception`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_request_exception`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_request_exception` AS select `view_request_info`.`request_id` AS `request_id`,`view_request_info`.`client_ip` AS `client_ip`,`view_request_info`.`method` AS `method`,`view_request_info`.`path_info` AS `path_info`,`view_request_info`.`request_info` AS `request_info`,`view_request_info`.`request_raw_body` AS `request_raw_body`,`view_request_info`.`response_body` AS `response_body`,`view_request_info`.`create_datetime` AS `create_datetime`,`view_request_info`.`exec_time` AS `exec_time`,`view_request_info`.`error_code` AS `error_code`,`view_request_info`.`error_message` AS `error_message`,`view_request_info`.`exception_type` AS `exception_type`,`view_request_info`.`exception_trace` AS `exception_trace`,`view_request_info`.`version` AS `version` from `emotibot`.`view_request_info` where (`view_request_info`.`error_code` is not null) order by `view_request_info`.`request_id` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_request_for_operater_log_level1`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_request_for_operater_log_level1`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_request_for_operater_log_level1` AS select `emotibot`.`ent_request_log`.`create_datetime` AS `create_datetime`,`emotibot`.`ent_request_log`.`user_id` AS `user_id`,`emotibot`.`ent_request_log`.`path_info` AS `path_info`,`emotibot`.`ent_request_log`.`request_info` AS `request_info`,`emotibot`.`ent_request_log`.`request_raw_body` AS `request_raw_body`,`FUNC_GET_APPID_IN_REQUEST_INFO`(`emotibot`.`ent_request_log`.`request_info`) AS `appid_in_request_info`,`FUNC_GET_APPID_IN_REQUEST_INFO`(`emotibot`.`ent_request_log`.`request_raw_body`) AS `appid_in_request_raw` from `emotibot`.`ent_request_log` where (`emotibot`.`ent_request_log`.`user_id` is not null);

-- -----------------------------------------------------
-- View `emotibot`.`view_request_for_operater_log_level2`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_request_for_operater_log_level2`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_request_for_operater_log_level2` AS select `view_request_for_operater_log_level1`.`user_id` AS `USER_ID`,`emotibot`.`ent_api`.`SHOW_IN_OP_LOG` AS `SHOW_IN_OP_LOG`,`emotibot`.`ent_api`.`URL` AS `URL`,`emotibot`.`ent_api`.`MESSAGE` AS `MESSAGE`,`view_request_for_operater_log_level1`.`create_datetime` AS `create_datetime`,`view_request_for_operater_log_level1`.`path_info` AS `path_info`,`view_request_for_operater_log_level1`.`request_info` AS `request_info`,`view_request_for_operater_log_level1`.`request_raw_body` AS `request_raw_body`,(case when (`view_request_for_operater_log_level1`.`appid_in_request_info` is not null) then `view_request_for_operater_log_level1`.`appid_in_request_info` when (`view_request_for_operater_log_level1`.`appid_in_request_raw` is not null) then `view_request_for_operater_log_level1`.`appid_in_request_raw` else replace(`view_request_for_operater_log_level1`.`path_info`,`emotibot`.`ent_api`.`URL`,'') end) AS `app_id` from (`emotibot`.`view_request_for_operater_log_level1` join `emotibot`.`ent_api` on(((`emotibot`.`ent_api`.`SHOW_IN_OP_LOG` = 1) and (`view_request_for_operater_log_level1`.`path_info` like concat(`emotibot`.`ent_api`.`URL`,'%')))));

-- -----------------------------------------------------
-- View `emotibot`.`view_request_for_operater_log_level3`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_request_for_operater_log_level3`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_request_for_operater_log_level3` AS select `emotibot`.`ent_request_log`.`create_datetime` AS `create_datetime`,`emotibot`.`ent_api`.`MESSAGE` AS `message`,`emotibot`.`ent_request_log`.`user_id` AS `user_id`,`emotibot`.`ent_request_log`.`app_id` AS `app_id`,`emotibot`.`ent_request_log`.`path_info` AS `path_info`,`emotibot`.`ent_request_log`.`request_info` AS `request_info`,`emotibot`.`ent_request_log`.`request_raw_body` AS `request_raw_body`,`view_valid_robot`.`nickname` AS `robot_name`,`emotibot`.`api_user`.`NickName` AS `user_name` from (((`emotibot`.`ent_request_log` join `emotibot`.`view_valid_robot` on((`view_valid_robot`.`apikey` = `emotibot`.`ent_request_log`.`app_id`))) join `emotibot`.`api_user` on((`emotibot`.`api_user`.`UserId` = `emotibot`.`ent_request_log`.`user_id`))) join `emotibot`.`ent_api` on(((`emotibot`.`ent_request_log`.`path_info` = `emotibot`.`ent_api`.`URL`) and (`emotibot`.`ent_api`.`SHOW_IN_OP_LOG` = 1))));

-- -----------------------------------------------------
-- View `emotibot`.`view_request_info`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_request_info`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_request_info` AS select `emotibot`.`ent_request_log`.`ID` AS `request_id`,`emotibot`.`ent_request_log`.`client_ip` AS `client_ip`,`emotibot`.`ent_request_log`.`method` AS `method`,`emotibot`.`ent_request_log`.`path_info` AS `path_info`,`emotibot`.`ent_request_log`.`request_info` AS `request_info`,`emotibot`.`ent_request_log`.`request_raw_body` AS `request_raw_body`,`emotibot`.`tbl_request_response`.`response_body` AS `response_body`,`emotibot`.`ent_request_log`.`create_datetime` AS `create_datetime`,`emotibot`.`tbl_request_response`.`exec_time` AS `exec_time`,`emotibot`.`tbl_request_exception`.`error_code` AS `error_code`,`emotibot`.`tbl_request_exception`.`error_message` AS `error_message`,`emotibot`.`tbl_request_exception`.`exception_type` AS `exception_type`,`emotibot`.`tbl_request_exception`.`exception_trace` AS `exception_trace`,`emotibot`.`ent_request_log`.`version` AS `version` from ((`emotibot`.`ent_request_log` left join `emotibot`.`tbl_request_response` on((`emotibot`.`ent_request_log`.`ID` = `emotibot`.`tbl_request_response`.`request_id`))) left join `emotibot`.`tbl_request_exception` on((`emotibot`.`ent_request_log`.`ID` = `emotibot`.`tbl_request_exception`.`request_id`))) order by `emotibot`.`ent_request_log`.`ID` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_right_module`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_right_module`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_right_module` AS select `emotibot`.`ent_right`.`NAME` AS `Name`,`emotibot`.`ent_module`.`Name` AS `ModuleName` from (`emotibot`.`ent_right` join `emotibot`.`ent_module`) where (`emotibot`.`ent_module`.`ID` = `emotibot`.`ent_right`.`MODULEID`);

-- -----------------------------------------------------
-- View `emotibot`.`view_robot_solutions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_robot_solutions`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_robot_solutions` AS select `emotibot`.`tbl_robot_solution`.`solution_id` AS `solution_id`,`emotibot`.`tbl_robot_solution`.`robot_api_key` AS `robot_api_key`,`emotibot`.`ent_solution`.`name` AS `solution_name`,`emotibot`.`ent_solution`.`executor` AS `executor`,`emotibot`.`ent_solution`.`description` AS `solution_description`,`emotibot`.`ent_solution`.`show_in_solution_list` AS `show_in_solution_list` from (`emotibot`.`tbl_robot_solution` join `emotibot`.`ent_solution` on((`emotibot`.`tbl_robot_solution`.`solution_id` = `emotibot`.`ent_solution`.`id`))) union select `emotibot`.`ent_solution`.`id` AS `solution_id`,`emotibot`.`api_userkey`.`ApiKey` AS `robot_api_key`,`emotibot`.`ent_solution`.`name` AS `solution_name`,`emotibot`.`ent_solution`.`executor` AS `executor`,`emotibot`.`ent_solution`.`description` AS `solution_description`,`emotibot`.`ent_solution`.`show_in_solution_list` AS `show_in_solution_list` from (`emotibot`.`api_userkey` join `emotibot`.`ent_solution` on(((`emotibot`.`ent_solution`.`optional` = 0) and (`emotibot`.`api_userkey`.`Status` = 1))));

-- -----------------------------------------------------
-- View `emotibot`.`view_upload_corpus_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_upload_corpus_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_upload_corpus_history` AS select `emotibot`.`tbl_upload_corpus_history`.`id` AS `id`,`emotibot`.`tbl_upload_corpus_history`.`user_id` AS `user_id`,`emotibot`.`tbl_upload_corpus_history`.`app_id` AS `app_id`,`emotibot`.`tbl_upload_corpus_history`.`is_part` AS `is_part`,`emotibot`.`tbl_upload_corpus_history`.`type` AS `type`,(case `emotibot`.`tbl_upload_corpus_history`.`type` when 'SQ-Answer' then '标准问题' when 'MIXED' then '混合语料' when 'TEST_CASE' then '测试题' when 'LQ-BQ' then '已标注语料' when 'EQ-BQ' then '扩写语料' when 'USER-LOG' then '未标注语料' end) AS `type_text`,(case `emotibot`.`tbl_upload_corpus_history`.`is_part` when 1 then '增量' else '全量' end) AS `is_part_text`,`emotibot`.`tbl_upload_corpus_history`.`comments` AS `comments`,concat('/Files/ssm/',convert(`emotibot`.`tbl_upload_corpus_history`.`app_id` using utf8),'/',`emotibot`.`tbl_upload_corpus_history`.`file_path`) AS `download_path`,concat('/Files/ssm/',convert(`emotibot`.`tbl_upload_corpus_history`.`app_id` using utf8),'/',concat(left(`emotibot`.`tbl_upload_corpus_history`.`file_path`,(char_length(`emotibot`.`tbl_upload_corpus_history`.`file_path`) - locate('_',reverse(`emotibot`.`tbl_upload_corpus_history`.`file_path`)))),'.xlsx')) AS `raw_file_path`,`emotibot`.`tbl_upload_corpus_history`.`valid_rows` AS `valid_rows`,`emotibot`.`tbl_upload_corpus_history`.`date_time` AS `date_time` from `emotibot`.`tbl_upload_corpus_history` order by `emotibot`.`tbl_upload_corpus_history`.`date_time` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_upload_test_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_upload_test_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_upload_test_history` AS select `emotibot`.`tbl_upload_ml_test_history`.`id` AS `id`,`emotibot`.`tbl_upload_ml_test_history`.`app_id` AS `app_id`,`emotibot`.`tbl_upload_ml_test_history`.`user_id` AS `user_id`,`emotibot`.`tbl_upload_ml_test_history`.`is_part` AS `is_part`,`emotibot`.`tbl_upload_ml_test_history`.`comments` AS `comments`,(case `emotibot`.`tbl_upload_ml_test_history`.`is_part` when 1 then '增量' else '全量' end) AS `is_part_text`,concat('/Files/ml_test/',convert(`emotibot`.`tbl_upload_ml_test_history`.`app_id` using utf8),'/',`emotibot`.`tbl_upload_ml_test_history`.`file_path`) AS `download_path`,concat('/Files/ml_test/',convert(`emotibot`.`tbl_upload_ml_test_history`.`app_id` using utf8),'/',concat(left(`emotibot`.`tbl_upload_ml_test_history`.`file_path`,(char_length(`emotibot`.`tbl_upload_ml_test_history`.`file_path`) - locate('_',reverse(`emotibot`.`tbl_upload_ml_test_history`.`file_path`)))),'.xlsx')) AS `raw_file_path`,`emotibot`.`tbl_upload_ml_test_history`.`rows` AS `rows`,`emotibot`.`tbl_upload_ml_test_history`.`date_time` AS `date_time` from `emotibot`.`tbl_upload_ml_test_history` order by `emotibot`.`tbl_upload_ml_test_history`.`date_time` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_upload_userlog_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_upload_userlog_history`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_upload_userlog_history` AS select `view_upload_corpus_history`.`id` AS `id`,`view_upload_corpus_history`.`user_id` AS `user_id`,`view_upload_corpus_history`.`app_id` AS `app_id`,`view_upload_corpus_history`.`is_part` AS `is_part`,`view_upload_corpus_history`.`type` AS `type`,`view_upload_corpus_history`.`type_text` AS `type_text`,`view_upload_corpus_history`.`is_part_text` AS `is_part_text`,`view_upload_corpus_history`.`comments` AS `comments`,`view_upload_corpus_history`.`download_path` AS `download_path`,`view_upload_corpus_history`.`raw_file_path` AS `raw_file_path`,`view_upload_corpus_history`.`valid_rows` AS `valid_rows`,`view_upload_corpus_history`.`date_time` AS `date_time` from `emotibot`.`view_upload_corpus_history` where ((`view_upload_corpus_history`.`type` = 'USER-LOG') or (`view_upload_corpus_history`.`type` = 'LQ-BQ')) order by `view_upload_corpus_history`.`date_time` desc;

-- -----------------------------------------------------
-- View `emotibot`.`view_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_user`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_user` AS select `emotibot`.`api_user`.`UserId` AS `UserId`,`emotibot`.`api_user`.`Phone` AS `Phone`,`emotibot`.`api_user`.`Email` AS `Email`,`emotibot`.`api_user`.`CreatedTime` AS `CreatedTime`,`emotibot`.`api_user`.`Password` AS `Password`,`emotibot`.`api_user`.`NickName` AS `UserName`,`emotibot`.`api_user`.`Gender` AS `Gender`,`emotibot`.`api_user`.`Type` AS `Type`,`emotibot`.`api_user`.`Status` AS `Status`,`emotibot`.`api_user`.`AccountStatus` AS `account_status`,`emotibot`.`api_user`.`UpdatedTime` AS `UpdatedTime`,`emotibot`.`api_user`.`Owner` AS `Owner`,`emotibot`.`api_user`.`Remark` AS `Remark`,`emotibot`.`api_user`.`AiNickName` AS `AiNickName`,`emotibot`.`api_user`.`Msg` AS `Msg`,`emotibot`.`api_user`.`enterprise_id` AS `enterprise_id`,`emotibot`.`api_user`.`RoleId` AS `roleid`,`emotibot`.`api_enterprise`.`enterprise_name` AS `enterprise_name`,`emotibot`.`api_enterprise`.`account_type` AS `account_type`,`emotibot`.`api_enterprise`.`customer_manager` AS `customer_manager`,`emotibot`.`api_enterprise`.`email` AS `super_user_email`,`emotibot`.`api_enterprise`.`phone` AS `super_user_phone`,`emotibot`.`api_enterprise`.`project_leader` AS `project_leader`,`emotibot`.`api_enterprise`.`account_status` AS `enterprise_account_status`,`emotibot`.`api_enterprise`.`is_remove` AS `is_remove`,`emotibot`.`api_enterprise`.`business_card` AS `business_card`,`emotibot`.`api_enterprise`.`remark` AS `enterprise_remark`,`emotibot`.`api_enterprise`.`enterprise_type` AS `enterprise_type` from (`emotibot`.`api_user` left join `emotibot`.`api_enterprise` on((convert(`emotibot`.`api_user`.`enterprise_id` using utf8mb4) = `emotibot`.`api_enterprise`.`id`)));

-- -----------------------------------------------------
-- View `emotibot`.`view_user_lastest_stared_robot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_user_lastest_stared_robot`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_user_lastest_stared_robot` AS select `emotibot`.`tbl_user_stare_robot`.`user_id` AS `user_id`,`emotibot`.`tbl_user_stare_robot`.`app_id` AS `app_id`,max(`emotibot`.`tbl_user_stare_robot`.`stare_date_time`) AS `lastest_stared_datetime` from `emotibot`.`tbl_user_stare_robot` group by `emotibot`.`tbl_user_stare_robot`.`user_id`,`emotibot`.`tbl_user_stare_robot`.`app_id`;

-- -----------------------------------------------------
-- View `emotibot`.`view_user_role_ex`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_user_role_ex`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_user_role_ex` AS select `emotibot`.`ent_role`.`ID` AS `ID`,`emotibot`.`ent_role`.`NAME` AS `NAME`,`emotibot`.`ent_role`.`DESCRIPTION` AS `DESCRIPTION`,`emotibot`.`ent_role`.`ENABLED` AS `enabled`,(case `emotibot`.`ent_role`.`ENABLED` when 1 then '有效' else '无效' end) AS `enabledStr` from `emotibot`.`ent_role`;

-- -----------------------------------------------------
-- View `emotibot`.`view_valid_robot`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `emotibot`.`view_valid_robot`;
USE `emotibot`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `emotibot`.`view_valid_robot` AS select `emotibot`.`api_userkey`.`NickName` AS `nickname`,`emotibot`.`api_userkey`.`ApiKey` AS `apikey` from `emotibot`.`api_userkey` where (`emotibot`.`api_userkey`.`Status` = 1);
USE `emotibot`;

DELIMITER $$
USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_AFTER_DELETE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_AFTER_DELETE`
AFTER DELETE ON `emotibot`.`ent_config`
FOR EACH ROW
BEGIN
if old.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;
END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_AFTER_INSERT`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_AFTER_INSERT`
AFTER INSERT ON `emotibot`.`ent_config`
FOR EACH ROW
BEGIN

if new.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_AFTER_UPDATE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_AFTER_UPDATE`
AFTER UPDATE ON `emotibot`.`ent_config`
FOR EACH ROW
BEGIN
if new.module <> 'auto_trigger' then
	CALL `emotibot`.`sp_update_config_version`('system', 'system');
end if;
END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_appid_customization_AFTER_DELETE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_appid_customization_AFTER_DELETE`
AFTER DELETE ON `emotibot`.`ent_config_appid_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, old.app_id);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_appid_customization_AFTER_INSERT`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_appid_customization_AFTER_INSERT`
AFTER INSERT ON `emotibot`.`ent_config_appid_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, new.app_id);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_appid_customization_AFTER_UPDATE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_appid_customization_AFTER_UPDATE`
AFTER UPDATE ON `emotibot`.`ent_config_appid_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(null, new.app_id);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_user_customization_AFTER_DELETE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_user_customization_AFTER_DELETE`
AFTER DELETE ON `emotibot`.`ent_config_user_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(old.user_id, null);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_user_customization_AFTER_INSERT`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_user_customization_AFTER_INSERT`
AFTER INSERT ON `emotibot`.`ent_config_user_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(new.user_id, null);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_config_user_customization_AFTER_UPDATE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_config_user_customization_AFTER_UPDATE`
AFTER UPDATE ON `emotibot`.`ent_config_user_customization`
FOR EACH ROW
BEGIN
	CALL `emotibot`.`sp_update_config_version`(new.user_id, null);

END$$

USE `emotibot`$$
DROP TRIGGER IF EXISTS `emotibot`.`ent_ml_test_case_BEFORE_DELETE`;
CREATE
DEFINER=`root`@`%`
TRIGGER `emotibot`.`ent_ml_test_case_BEFORE_DELETE`
BEFORE DELETE ON `emotibot`.`ent_ml_test_case`
FOR EACH ROW
BEGIN



END$$

DELIMITER ;

DROP EVENT IF EXISTS EVT_ARCHIVE_REQUEST_LOG_PER_DAY ;
CREATE EVENT EVT_ARCHIVE_REQUEST_LOG_PER_DAY
 ON SCHEDULE EVERY 1 DAY STARTS TIMESTAMP '2018-1-1 00:00:10'
 ON COMPLETION PRESERVE
DO  
CALL sp_request_log_archive_last_day();

DROP EVENT IF EXISTS EVT_TRUNCATE_ARCHIVE_PEER_WEEK ;
CREATE EVENT EVT_CHAT_OPT_PEER_WEEK
 ON SCHEDULE EVERY  1 WEEK STARTS TIMESTAMP '2018-1-1 00:10:00'
 ON COMPLETION PRESERVE
DO  
truncate tbl_request_log_archive  ;
truncate tbl_request_exception_archive; 
truncate tbl_request_response_archive ;
truncate ent_request_log_archive  ;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
